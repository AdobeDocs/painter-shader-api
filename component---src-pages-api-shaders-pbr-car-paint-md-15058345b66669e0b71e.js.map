{"version":3,"file":"component---src-pages-api-shaders-pbr-car-paint-md-15058345b66669e0b71e.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,MACE,GAAM,6CAA2C,8CAEnDA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,oCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,oRAWhCH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,mFACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,olEAwDpC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/api/shaders/pbr-car-paint.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-0\"\n      }}>{` `}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-1\"\n      }}>{` `}</a></p>\n    <h1 {...{\n      \"id\": \"substance-3d-painter-car-paint-pbr-shader\"\n    }}>{`Substance 3D Painter Car Paint PBR shader`}</h1>\n    <hr></hr>\n    <p>{`Import from libraries.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`import lib-sampler.glsl\n import lib-pbr.glsl\n \n //: param auto channel_basecolor\n uniform SamplerSparse basecolor_tex;\n //: param auto channel_roughness\n uniform SamplerSparse roughness_tex;\n //: param auto channel_metallic\n uniform SamplerSparse metallic_tex;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-2\"\n      }}>{` `}</a></p>\n    <p>{`-------EXTERNAL ---------------------------------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param custom { \"default\": \"flakes\", \"label\": \"Flakes Texture\", \"usage\": \"texture\" }\n uniform sampler2D flakes_tex;\n \n //: param custom { \"default\": 25, \"label\": \"Flakes Scale\", \"min\": 1.0, \"max\": 100.0 }\n uniform float flakes_scale;\n \n //: param custom { \"default\": 0.75, \"label\": \"Flakes Intensity\", \"min\": 0.0, \"max\": 1.0 }\n uniform float normalPerturbation;\n \n //: param custom { \"default\": [0.3,0.3,0], \"label\": \"Flake Color\", \"widget\": \"color\" }\n uniform vec3 flakeLayerColor;\n \n //: param custom { \"default\": [0.2,0.0,0.2], \"label\": \"Secondary Paint Color\", \"widget\": \"color\" }\n uniform vec3 paintColorMid;\n \n //: param custom { \"default\": [0.3,0.2,0.0], \"label\": \"Tertiary Paint Color\", \"widget\": \"color\" }\n uniform vec3 paintColor2;\n \n \n void shade(V2F inputs)\n {\n  vec3 baseColor = getBaseColor(basecolor_tex, inputs.sparse_coord);\n  float metallic = getMetallic(metallic_tex, inputs.sparse_coord);\n  vec3 diffColor = generateDiffuseColor(baseColor, metallic);\n  // Get detail (ambient occlusion) and global (shadow) occlusion factors\n  float occlusion = getAO(inputs.sparse_coord) * getShadowFactor();\n \n  LocalVectors vectors = computeLocalFrame(inputs);\n \n  //Flakes\n  vec3 vFlakesNormal = texture(flakes_tex, inputs.tex_coord * flakes_scale).rgb;\n  vec3 vNp1 = normalize(vectors.normal + 0.2 * vFlakesNormal);\n  vec3 vNp2 = normalize(vectors.normal + normalPerturbation * vFlakesNormal);\n \n  vec3 vNp1World = computeWSNormal(inputs.sparse_coord, inputs.tangent, inputs.bitangent, vNp1);\n  float fFresnel1 = max(0.0, dot(vNp1World, vectors.eye));\n \n  vec3 vNp2World = computeWSNormal(inputs.sparse_coord, inputs.tangent, inputs.bitangent, vNp2);\n  float fFresnel2 = max(0.0, dot(vNp2World, vectors.eye));\n \n  float fFresnel1Sq = fFresnel1 * fFresnel1;\n  vec3 paintColor =\n  fFresnel1 * baseColor +\n  fFresnel1Sq * paintColorMid +\n  fFresnel1Sq * fFresnel1Sq * paintColor2 +\n  pow(fFresnel2, 16.0) * flakeLayerColor;\n  diffColor = mix(diffColor, paintColor, metallic);\n \n  diffuseShadingOutput(occlusion * pbrComputeDiffuse(vectors.normal, diffColor));\n }\n \n \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}