"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[8494],{97985:function(e,n,s){s.r(n),s.d(n,{_frontmatter:function(){return p},default:function(){return u}});var o=s(87462),a=s(63366),t=(s(15007),s(64983)),r=s(91515),l=["components"],p={},c={_frontmatter:p},i=r.Z;function u(e){var n=e.components,s=(0,a.Z)(e,l);return(0,t.mdx)(i,(0,o.Z)({},c,s,{components:n,mdxType:"MDXLayout"}),(0,t.mdx)("p",null,(0,t.mdx)("a",{parentName:"p",href:"#section-0"}," ")),(0,t.mdx)("p",null,(0,t.mdx)("a",{parentName:"p",href:"#section-1"}," ")),(0,t.mdx)("h1",{id:"substance-3d-painter-specularglossiness-pbr-shader"},"Substance 3D Painter Specular/Glossiness PBR shader"),(0,t.mdx)("p",null,"Import from libraries."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-glsl"},'\n\n\n\n\n\n \n // Link Specular/Glossiness skin MDL for Iray\n //: metadata {\n //: "mdl" : "mdl::alg::materials::skin_specular_glossiness::skin_specular_glossiness"\n //: }\n')),(0,t.mdx)("p",null,(0,t.mdx)("a",{parentName:"p",href:"#section-2"}," ")),(0,t.mdx)("p",null,"Channels needed for spec/gloss workflow are bound here."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-glsl"},"//: param auto channel_diffuse\n uniform SamplerSparse diffuse_tex;\n //: param auto channel_specular\n uniform SamplerSparse specularcolor_tex;\n //: param auto channel_glossiness\n uniform SamplerSparse glossiness_tex;\n \n \n void shade(V2F inputs)\n {\n  // Apply parallax occlusion mapping if possible\n  vec3 viewTS = worldSpaceToTangentSpace(getEyeVec(inputs.position), inputs);\n  applyParallaxOffset(inputs, viewTS);\n \n  float glossiness = getGlossiness(glossiness_tex, inputs.sparse_coord);\n  vec3 specColor = getSpecularColor(specularcolor_tex, inputs.sparse_coord);\n  vec3 diffColor = getDiffuse(diffuse_tex, inputs.sparse_coord) * (vec3(1.0) - specColor);\n \n  // Get detail (ambient occlusion) and global (shadow) occlusion factors\n  // separately in order to blend the bent normals properly\n  float shadowFactor = getShadowFactor();\n  float occlusion = getAO(inputs.sparse_coord, true, use_bent_normal);\n  float specOcclusion = use_bent_normal ? shadowFactor : occlusion * shadowFactor;\n \n  LocalVectors vectors = computeLocalFrame(inputs);\n  computeBentNormal(vectors,inputs);\n \n  // Feed parameters for a physically based BRDF integration\n  emissiveColorOutput(pbrComputeEmissive(emissive_tex, inputs.sparse_coord));\n  albedoOutput(diffColor);\n  diffuseShadingOutput(occlusion * shadowFactor * envIrradiance(getDiffuseBentNormal(vectors)));\n  specularShadingOutput(specOcclusion * pbrComputeSpecular(vectors, specColor, 1.0 - glossiness, occlusion, getBentNormalSpecularAmount()));\n  sssCoefficientsOutput(getSSSCoefficients(inputs.sparse_coord));\n  sssColorOutput(getSSSColor(inputs.sparse_coord));\n }\n \n \n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-shaders-pbr-spec-gloss-md-60a936b304fc68304cb1.js.map