{"version":3,"file":"component---src-pages-api-libraries-lib-alpha-test-md-a41d77b610cf6c6a885e.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,MACE,GAAM,sBAAoB,oCAE5BA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,qBAA+B,MAC1DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,eACxBH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,wDAIhCH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,kDACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,4kBAahCH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,mCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,ihBAahCH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,mCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,ieAUhCH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,uLAGAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,mSAcpC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/api/libraries/lib-alpha-test.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-0\"\n      }}>{`#`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-1\"\n      }}>{`#`}</a></p>\n    <h1 {...{\n      \"id\": \"lib-alpha-testglsl\"\n    }}>{`lib`}{`-`}{`alpha`}{`-`}{`test.glsl`}</h1>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`Public Functions:`}</strong>{`\n`}<inlineCode parentName=\"p\">{`alphaKill`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`import lib-sampler.glsl\n import lib-random.glsl\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-2\"\n      }}>{`#`}</a></p>\n    <p>{`Opacity map, provided by the engine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto channel_opacity\n uniform SamplerSparse opacity_tex;\n \n //: param custom {\n //:   \"group\": \"Geometry/Opacity\",\n //:   \"label\": \"Enable alpha test\",\n //:   \"default\": false,\n //:   \"asm\": \"_opacity_alpha_test\",\n //:   \"description\": \"<html><head/><body><p>Creates a binary cut-through, meaning any point on the texture is either fully transparent or fully opaque.<br/><b>Please note:</b> The following channel needs to be present for this parameter to have an effect: <b>Opacity</b></p></body></html>\"\n //: }\n uniform_specialization bool alpha_test_enabled;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-3\"\n      }}>{`#`}</a></p>\n    <p>{`Alpha test threshold.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param custom {\n //:   \"group\": \"Geometry/Opacity\",\n //:   \"label\": \"Alpha test threshold\",\n //:   \"visible\": \"input.alpha_test_enabled\",\n //:   \"default\": 0.33,\n //:   \"asm\": \"_opacity_alpha_threshold\",\n //:   \"min\": 0.0,\n //:   \"max\": 1.0,\n //:   \"description\": \"<html><head/><body><p>The threshold of the <b>Alpha test</b>. The geometry is displayed as fully transparent for values of the <b>Opacity</b> channel that are below this threshold.</p></body></html>\"\n //: }\n uniform float alpha_test_threshold;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-4\"\n      }}>{`#`}</a></p>\n    <p>{`Alpha test dithering.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param custom {\n //:   \"group\": \"Geometry/Opacity\",\n //:   \"label\": \"Alpha test dithering\",\n //:   \"visible\": \"input.alpha_test_enabled\",\n //:   \"default\": false,\n //:   \"description\": \"<html><head/><body><p>Applies a dithered noise to the <b>Alpha test</b> mask.<br/><b>Please note</b>: It is recommended to enable <b>Activate Temporal Anti-Aliasing</b> in <b>Display Settings</b> for a smoother result.</p></body></html>\"\n //: }\n uniform bool alpha_test_dither;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-5\"\n      }}>{`#`}</a></p>\n    <p>{`Emulate alpha test : discard current fragment if\nits opacity is below a user defined threshold.\nShould be called AFTER texture sampling calls: it can break derivatives`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`void alphaKill(SparseCoord coord)\n {\n    if (alpha_test_enabled) {\n        float alpha = getOpacity(opacity_tex, coord);\n        float threshold = alpha_test_dither ? getBlueNoiseThresholdTemporal() : alpha_test_threshold;\n        if (alpha < threshold) discard;\n    }\n }\n \n \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}