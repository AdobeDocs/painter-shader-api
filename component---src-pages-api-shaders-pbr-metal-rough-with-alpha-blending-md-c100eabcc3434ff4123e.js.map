{"version":3,"file":"component---src-pages-api-shaders-pbr-metal-rough-with-alpha-blending-md-c100eabcc3434ff4123e.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,0DAAwD,4DAEhEA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,oCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,uSAYhCH,EAAAA,EAAAA,KAAA,mEACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,+BAGhCH,EAAAA,EAAAA,KAAA,mCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,4BAGhCH,EAAAA,EAAAA,KAAA,sEACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,yXAYhCH,EAAAA,EAAAA,KAAA,iCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,8qDAuCpC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/api/shaders/pbr-metal-rough-with-alpha-blending.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"substance-3d-painter-metalrough-and-opacity-pbr-shader\"\n    }}>{`Substance 3D Painter Metal/Rough and opacity PBR shader`}</h1>\n    <hr></hr>\n    <p>{`Import from libraries.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`import lib-pbr.glsl\n import lib-bent-normal.glsl\n import lib-emissive.glsl\n import lib-pom.glsl\n import lib-utils.glsl\n \n // Link Metal/Roughness MDL for Iray\n //: metadata {\n //:   \"mdl\":\"mdl::alg::materials::physically_metallic_roughness::physically_metallic_roughness\"\n //: }\n`}</code></pre>\n    <p>{`Show back faces as there may be holes in front faces.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: state cull_face off\n`}</code></pre>\n    <p>{`Enable alpha blending`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: state blend over\n`}</code></pre>\n    <p>{`Channels needed for metal/rough workflow are bound here.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto channel_basecolor\n uniform SamplerSparse basecolor_tex;\n //: param auto channel_roughness\n uniform SamplerSparse roughness_tex;\n //: param auto channel_metallic\n uniform SamplerSparse metallic_tex;\n //: param auto channel_specularlevel\n uniform SamplerSparse specularlevel_tex;\n //: param auto channel_opacity\n uniform SamplerSparse opacity_tex;\n`}</code></pre>\n    <p>{`Shader entry point.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`void shade(V2F inputs)\n {\n   // Apply parallax occlusion mapping if possible\n   vec3 viewTS = worldSpaceToTangentSpace(getEyeVec(inputs.position), inputs);\n   applyParallaxOffset(inputs, viewTS);\n \n   // Fetch material parameters, and conversion to the specular/roughness model\n   float roughness = getRoughness(roughness_tex, inputs.sparse_coord);\n   vec3 baseColor = getBaseColor(basecolor_tex, inputs.sparse_coord);\n   float metallic = getMetallic(metallic_tex, inputs.sparse_coord);\n   float specularLevel = getSpecularLevel(specularlevel_tex, inputs.sparse_coord);\n \n   vec3 diffColor = generateDiffuseColor(baseColor, metallic);\n   vec3 specColor = generateSpecularColor(specularLevel, baseColor, metallic);\n \n   // Get detail (ambient occlusion) and global (shadow) occlusion factors\n   // separately in order to blend the bent normals properly\n   float shadowFactor = getShadowFactor();\n   float occlusion = getAO(inputs.sparse_coord, true, use_bent_normal);\n   float specOcclusion = specularOcclusionCorrection(\n     use_bent_normal ? shadowFactor : occlusion * shadowFactor,\n     metallic,\n     roughness);\n \n   LocalVectors vectors = computeLocalFrame(inputs);\n   computeBentNormal(vectors,inputs);\n \n   // Feed parameters for a physically based BRDF integration\n   alphaOutput(getOpacity(opacity_tex, inputs.sparse_coord));\n   emissiveColorOutput(pbrComputeEmissive(emissive_tex, inputs.sparse_coord));\n   diffuseShadingOutput(occlusion * shadowFactor * pbrComputeDiffuse(getDiffuseBentNormal(vectors), diffColor));\n   specularShadingOutput(specOcclusion * pbrComputeSpecular(vectors, specColor, roughness, occlusion, getBentNormalSpecularAmount()));\n }\n \n \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}