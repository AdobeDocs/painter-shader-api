{"version":3,"file":"component---src-pages-api-libraries-lib-pbr-aniso-md-3934d4f82a058d54e4a5.js","mappings":"mTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,MACE,GAAM,qBAAmB,uBAE3BA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,qBAA+B,MAC1DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kBAAgC,MAC1DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,MAAoB,MAC9CH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,MACtDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,yBAAuC,MACjEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,uBAAqC,MAC/DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,kBAAgC,MAC1DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,mCACxBH,EAAAA,EAAAA,KAAA,iCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,2BAGhCH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,oCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,46HA2JpC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/api/libraries/lib-pbr-aniso.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-0\"\n      }}>{` `}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-1\"\n      }}>{` `}</a></p>\n    <h1 {...{\n      \"id\": \"lib-pbr-anisoglsl\"\n    }}>{`lib-pbr-aniso.glsl`}</h1>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`Public Functions:`}</strong>{`\n`}<inlineCode parentName=\"p\">{`normal_distrib`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`G1`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`visibility`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`cook_torrance_contrib`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`importanceSampleGGX`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`probabilityGGX`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`pbrComputeSpecularAnisotropic`}</inlineCode></p>\n    <p>{`Import from library`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`import lib-pbr.glsl\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-2\"\n      }}>{` `}</a></p>\n    <p>{`BRDF related functions`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float normal_distrib(\n  vec3 localH,\n  vec2 alpha)\n {\n  localH.xy /= alpha;\n  float tmp = dot(localH, localH);\n  return 1.0 / (M_PI * alpha.x * alpha.y * tmp * tmp);\n }\n \n float G1(\n  vec3 localW,\n  vec2 alpha)\n {\n  // One generic factor of the geometry function divided by ndw\n  localW.xy *= alpha;\n  return 2.0 / (localW.z + length(localW));\n }\n \n float visibility(\n  vec3 localL,\n  vec3 localV,\n  vec2 alpha)\n {\n  // visibility is a Cook-Torrance geometry function divided by (n.l)*(n.v)\n  return G1(localL, alpha) * G1(localV, alpha);\n }\n \n vec3 cook_torrance_contrib(\n  float vdh,\n  float ndh,\n  vec3 localL,\n  vec3 localE,\n  vec3 F0,\n  vec3 F82,\n  vec2 alpha)\n {\n  // This is the contribution when using importance sampling with the GGX based\n  // sample distribution. This means ct_contrib = ct_brdf / ggx_probability\n  return fresnel(vdh, F0, F82) * (visibility(localL, localE, alpha) * vdh * localL.z / ndh);\n }\n \n vec3 cook_torrance_contrib(\n  float vdh,\n  float ndh,\n  vec3 localL,\n  vec3 localE,\n  vec3 Ks,\n  vec2 alpha)\n {\n  return cook_torrance_contrib(vdh, ndh, localL, localE, Ks, vec3(1.0), alpha);\n }\n \n vec3 importanceSampleGGX(vec2 Xi, vec2 alpha)\n {\n  float phi = 2.0 * M_PI * Xi.x;\n  vec2 slope = sqrt(Xi.y / (1.0 - Xi.y)) * alpha * vec2(cos(phi), sin(phi));\n  return normalize(vec3(slope, 1.0));\n }\n \n float probabilityGGX(vec3 localH, float vdh, vec2 alpha)\n {\n  return normal_distrib(localH, alpha) * localH.z / (4.0 * vdh);\n }\n \n vec3 pbrComputeSpecularAnisotropic(\n  LocalVectors vectors,\n  vec3 F0,\n  vec3 F82,\n  vec2 roughness,\n  float occlusion,\n  float bentNormalSpecularAmount)\n {\n  vec3 radiance = vec3(0.0);\n  vec2 alpha = roughness * roughness;\n  mat3 TBN = mat3(vectors.tangent, vectors.bitangent, vectors.normal);\n  vec3 localE = vectors.eye * TBN;\n  mat3 envTBN = mat3(\n  worldToEnvSpace(vectors.tangent),\n  worldToEnvSpace(vectors.bitangent),\n  worldToEnvSpace(vectors.normal));\n  vec3 envVertexN = worldToEnvSpace(vectors.vertexNormal);\n  vec3 envBent = worldToEnvSpace(vectors.bent);\n \n  // Bent normals occlusion\n  float occlusionStart = 0.75 - occlusion;\n  float occlusionEnd = 1.0 - occlusion;\n \n  for(int i=0; i<nbSamples; ++i)\n  {\n  vec2 Xi = fibonacci2DDitheredTemporal(i, nbSamples);\n  vec3 localH = importanceSampleGGX(Xi, alpha);\n  vec3 localL = reflect(-localE, localH);\n \n  float specOcclusion = 1.0;\n  vec3 envL = envTBN * localL;\n \n  if(bentNormalSpecularAmount!=0.0)\n  {\n  float mask = 1.0 - sqrt(1.0 - max(0.0, dot(envBent, envL)));\n  specOcclusion = smoothstep(occlusionStart, occlusionEnd, mask);\n  specOcclusion = mix(1.0, specOcclusion, bentNormalSpecularAmount);\n  }\n \n  if (localL.z > 0.0)\n  {\n  float vdh = max(1e-8, dot(localE, localH));\n \n  float fade = horizonFading(dot(envVertexN, envL), horizonFade);\n  float pdf = probabilityGGX(localH, vdh, alpha);\n  float lodS = max(roughness.x, roughness.y) < 0.01 ? 0.0 : computeLOD(envL, pdf);\n  // Offset lodS to trade bias for more noise\n  lodS -= 1.0;\n  vec3 preconvolvedSample = envSample(envL, lodS);\n \n  radiance +=\n  fade * specOcclusion * cook_torrance_contrib(vdh, localH.z, localL, localE, F0, F82, alpha) *\n  preconvolvedSample;\n  }\n  }\n \n  return radiance / float(nbSamples);\n }\n \n vec3 pbrComputeSpecularAnisotropic(\n  LocalVectors vectors,\n  vec3 F0,\n  vec3 F82,\n  vec2 roughness)\n {\n  return pbrComputeSpecularAnisotropic(vectors, F0, F82, roughness, 1.0, 0.0);\n }\n \n vec3 pbrComputeSpecularAnisotropic(\n  LocalVectors vectors,\n  vec3 specColor,\n  vec2 roughness,\n  float occlusion,\n  float bentNormalSpecularAmount)\n {\n  return pbrComputeSpecularAnisotropic(vectors, specColor, vec3(1.0), roughness, occlusion, bentNormalSpecularAmount);\n }\n \n vec3 pbrComputeSpecularAnisotropic(\n  LocalVectors vectors,\n  vec3 specColor,\n  vec2 roughness)\n {\n  return pbrComputeSpecularAnisotropic(vectors, specColor, roughness, 1.0, 0.0);\n }\n \n \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}