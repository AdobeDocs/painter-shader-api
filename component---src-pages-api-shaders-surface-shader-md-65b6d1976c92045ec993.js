"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[2995],{97386:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return d},default:function(){return p}});var a=n(87462),o=n(63366),r=(n(15007),n(64983)),i=n(91515),l=["components"],d={},s={_frontmatter:d},u=i.Z;function p(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.mdx)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"#section-0"}," ")),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"#section-1"}," ")),(0,r.mdx)("h1",{id:"surface-shaderglsl"},"surface-shader.glsl"),(0,r.mdx)("hr",null),(0,r.mdx)("p",null,"To create a shader resource that can be used in Substance 3D Painter, just create a glsl file containing a single\nfunction called ",(0,r.mdx)("em",{parentName:"p"},"shade")," with the following profile:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-glsl"},"void shade(V2F inputs);\n")),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"#section-2"}," ")),(0,r.mdx)("h2",{id:"v2f-input-type-definition"},"V2F input type definition:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-glsl"},"struct V2F {\n  vec3 normal; // interpolated normal\n  vec3 tangent; // interpolated tangent\n  vec3 bitangent; // interpolated bitangent\n  vec3 position; // interpolated position\n  vec4 color[1]; // interpolated vertex colors (color0)\n  vec2 tex_coord; // interpolated texture coordinates (uv0)\n  SparseCoord sparse_coord; // interpolated sparse texture coordinates used by textureSparse() sampling function\n  vec2 multi_tex_coord[8]; // interpolated texture coordinates (uv0-uv7)\n };\n")),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"#section-3"}," ")),(0,r.mdx)("p",null,"Note: To obtain a SparseCoord for uv1-uv7, you have to explicitly call ",(0,r.mdx)("inlineCode",{parentName:"p"},"getSparseCoord(vec2)")," defined in ",(0,r.mdx)("a",{parentName:"p",href:"/painter-shader-api/src/pages/api/libraries/lib-sparse/"},"lib-sparse.glsl")),(0,r.mdx)("h2",{id:"surface-shader-outputs"},"Surface shader outputs:"),(0,r.mdx)("p",null,"The following functions can be called from within the ",(0,r.mdx)("em",{parentName:"p"},"shade")," function to describe fragment properties:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-glsl"},"// fragment opacity. default value: 1.0\n void alphaOutput(float);\n // diffuse lighting contribution. default value: vec3(0.0)\n void diffuseShadingOutput(vec3);\n // specular lighting contribution. default value: vec3(0.0)\n void specularShadingOutput(vec3);\n // color emitted by the fragment. default value: vec3(0.0)\n void emissiveColorOutput(vec3);\n // fragment color. default value: vec3(1.0)\n void albedoOutput(vec3);\n // subsurface scattering properties, see lib-sss.glsl for details. default value: vec4(0.0)\n void sssCoefficientsOutput(vec4);\n")),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"#section-4"}," ")),(0,r.mdx)("p",null,"As an example, the most basic rendering equation for computing the fragment color is: ",(0,r.mdx)("inlineCode",{parentName:"p"},"emissiveColor + albedo * diffuseShading + specularShading")))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-shaders-surface-shader-md-65b6d1976c92045ec993.js.map