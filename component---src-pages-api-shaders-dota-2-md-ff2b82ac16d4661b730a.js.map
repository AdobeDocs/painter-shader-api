{"version":3,"file":"component---src-pages-api-shaders-dota-2-md-ff2b82ac16d4661b730a.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/api/shaders/dota-2.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`dota-2.glsl`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-0\"\n      }}>{` `}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-1\"\n      }}>{` `}</a></p>\n    <h1 {...{\n      \"id\": \"substance-3d-painter-dota-2-shader\"\n    }}>{`Substance 3D Painter Dota 2 shader`}</h1>\n    <p>{`Import from libraries.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`import lib-sampler.glsl\n import lib-env.glsl\n import lib-normal.glsl\n import lib-alpha.glsl\n import lib-pbr.glsl\n \n //: state cull_face off\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-2\"\n      }}>{` `}</a></p>\n    <p>{`------------------------- Diffuse Map --------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto channel_basecolor\n uniform SamplerSparse diffuseMapSampler;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-3\"\n      }}>{` `}</a></p>\n    <p>{`-------MASK1 ---------------------------------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto channel_user0\n uniform SamplerSparse detail_tex;\n //: param auto channel_user1\n uniform SamplerSparse fresnelMaskSampler;\n //: param auto channel_metallic\n uniform SamplerSparse metallicSampler;\n //: param auto channel_emissive\n uniform SamplerSparse emissiveSampler;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-4\"\n      }}>{` `}</a></p>\n    <p>{`-------MASK2 ---------------------------------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto channel_specular\n uniform SamplerSparse specularWarpSampler;\n //: param auto channel_user2\n uniform SamplerSparse rimSampler;\n //: param auto channel_user3\n uniform SamplerSparse tintSpecSampler;\n //: param auto channel_glossiness\n uniform SamplerSparse glossinessSampler;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-5\"\n      }}>{` `}</a></p>\n    <p>{`------- Specular Parameters ---------------------------------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param custom { \"default\": 1, \"label\": \"Specular Color\", \"widget\": \"color\" }\n uniform vec3 fSpecularColor;\n \n //: param custom { \"default\": 16.0, \"label\": \"Specular Exponent\", \"min\": 0.0, \"max\": 512.0 }\n uniform float fSpecularExponent;\n \n //: param custom { \"default\": 4.0, \"label\": \"Specular Scale\", \"min\": 0.0, \"max\": 512.0 }\n uniform float fSpecularScale;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-6\"\n      }}>{` `}</a></p>\n    <p>{`------- Rim Lighting Parameters ---------------------------------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param custom { \"default\": 1, \"label\": \"Rim Light Color\", \"widget\": \"color\" }\n uniform vec3 fRimLightColor;\n \n //: param custom { \"default\": 2.0, \"label\": \"Rim Light Scale\", \"min\": 0.0, \"max\": 32.0 }\n uniform float fRimLightScale;\n \n //: param custom { \"default\": true, \"label\": \"Rim Lighting\" }\n uniform bool bDoRimLighting;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-7\"\n      }}>{` `}</a></p>\n    <p>{`------- Ambient ---------------------------------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param custom { \"default\": 0, \"label\": \"Ambient Color\", \"widget\": \"color\" }\n uniform vec3 fAmbientColor;\n \n //: param custom { \"default\": 1.0, \"label\": \"Ambient Scale\", \"min\": 1.0, \"max\": 10.0 }\n uniform float fAmbientScale;\n \n //: param custom { \"default\": true, \"label\": \"IBL Lighting\" }\n uniform bool bUseIBL;\n \n //: param custom { \"default\": false, \"label\": \"Alpha Test\" }\n uniform bool bHasAlpha;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-8\"\n      }}>{` `}</a></p>\n    <p>{`------- Textures ----------------------------------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param custom { \"default\": false, \"label\": \"Diffuse Warp\" }\n uniform bool bDoDiffuseWarp;\n //: param custom { \"default\": \"fresnelranges\", \"label\": \"Diffuse Warp\", \"usage\": \"texture\" }\n uniform sampler2D difwarp;\n \n //: param custom { \"default\": \"\", \"label\": \"Detail Map\", \"usage\": \"texture\" }\n uniform sampler2D detailMapSampler;\n //: param custom { \"default\": 1.0, \"label\": \"Detail Scale\", \"min\": 0.0, \"max\": 32.0 }\n uniform float fDetailScale;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-9\"\n      }}>{` `}</a></p>\n    <p>{`------- Lights ----------------------------------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param custom { \"default\": [10.0, 10.0, 10.0], \"label\": \"Light Position\", \"min\": -20, \"max\": 20 }\n uniform vec3 lightPosition_1;\n \n //: param custom { \"default\": 1, \"label\": \"Light Color\", \"widget\": \"color\" }\n uniform vec3 lightColor_1;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-10\"\n      }}>{` `}</a></p>\n    <p>{`-----------------------------------------------------------------//\n------------------------- Data Stucts ---------------------------//\n-----------------------------------------------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`struct lightProp\n {\n  vec3 lightVector;\n  vec3 lightColor;\n };\n \n lightProp lightArray[1];\n \n // Lights! Method based on Xoluil Shader ( http://www.laurenscorijn.com/xoliulshader ) Thanks mate :)\n void PropagateLights( vec3 position )\n {\n  lightArray[0].lightVector = lightPosition_1 - position;\n  lightArray[0].lightColor = lightColor_1;\n }\n \n float Fresnel( vec3 N, vec3 V, float X )\n {\n  float Fresnel = 1.0 - clamp(dot(N, V), 0.0, 1.0);\n  return pow(Fresnel, X);\n }\n \n void CustomHeroDoLighting( vec3 N, vec3 L, vec3 V, vec3 LightColor, float diffuseWarpMask, float flSpecularExponent, inout vec3 finalDiffuse, inout vec3 finalSpecular)\n {\n  // Normalize\n  L = normalize(L);\n  float NdotL = dot(N, L);\n  float halfLambert = NdotL * 0.5 + 0.5;\n \n  vec3 diffuseLight = LightColor;\n  // diffuse warp\n  diffuseLight *= bDoDiffuseWarp ? texture(difwarp, vec2(halfLambert, diffuseWarpMask)).rgb : vec3(halfLambert);\n  finalDiffuse += diffuseLight; // Output our diffuse lighting\n \n  NdotL = max(0.0, NdotL);\n  vec3 R = reflect( V, N ); // No half-vector so this is consistent in look with ps2.0\n  float RdotL = max(0.0, dot( L, -R ));\n \n  flSpecularExponent *= fSpecularExponent; // fSpecularExponent is from the UI Spinner\n  float flSpecularIntensity = NdotL * pow( RdotL, flSpecularExponent );\n  vec3 SpecularLighting = flSpecularIntensity * LightColor;\n  finalSpecular += SpecularLighting;\n }\n \n float sampleWithDefault(SamplerSparse samplerSparse, SparseCoord coord, float defaultValue)\n {\n  vec2 value = textureSparse(samplerSparse, coord).rg;\n  return value.r + defaultValue * (1.0 - value.g);\n }\n \n void shade(V2F inputs)\n {\n  PropagateLights(inputs.position.xyz); // Bring in lights\n \n  // Get world space vectors\n  inputs.normal = normalize(inputs.normal);\n  LocalVectors vectors = computeLocalFrame(inputs);\n \n  float flDetailMask = sampleWithDefault(detail_tex , inputs.sparse_coord, 0.0);\n  float flDiffuseWarpMask = sampleWithDefault(fresnelMaskSampler, inputs.sparse_coord, 0.3);\n  float flMetalnessMask = sampleWithDefault(metallicSampler , inputs.sparse_coord, 0.0);\n  float flSelfIllumMask = sampleWithDefault(emissiveSampler , inputs.sparse_coord, 0.0);\n \n  float flSpecularMask = sampleWithDefault(specularWarpSampler, inputs.sparse_coord, 0.3);\n  float flRimMask = sampleWithDefault(rimSampler , inputs.sparse_coord, 0.3);\n  float flTintByBaseMask = sampleWithDefault(tintSpecSampler , inputs.sparse_coord, 0.0);\n  float flSpecularExponent = sampleWithDefault(glossinessSampler , inputs.sparse_coord, 0.3);\n \n  vec3 FresnelTerm = vec3(Fresnel(vectors.normal, vectors.eye, 5.0));\n  FresnelTerm.b = max( FresnelTerm.b, flDiffuseWarpMask );\n \n  vec3 albedo = getBaseColor(diffuseMapSampler, inputs.sparse_coord);\n  vec3 final = albedo * vec3(flSelfIllumMask); // emissive\n \n  vec3 diffuseColor = albedo; // assign the diffuse texture to our global diffuse color\n  vec3 Detail = texture(detailMapSampler, inputs.tex_coord * fDetailScale).rgb;\n  diffuseColor += Detail * flDetailMask;\n \n  if (bHasAlpha) {\n  alphaKill(inputs.sparse_coord);\n  }\n \n  vec3 ambient = fAmbientColor + fAmbientScale;\n  if(bUseIBL)\n  {\n  ambient = envIrradiance(vectors.normal) * fAmbientScale;\n  }\n \n  vec3 finalDiffuse = vec3(0.0);\n  vec3 finalSpecular = vec3(0.0);\n  CustomHeroDoLighting(vectors.normal, lightArray[0].lightVector, vectors.eye, lightArray[0].lightColor, flDiffuseWarpMask, flSpecularExponent, finalDiffuse, finalSpecular);\n \n  final += finalDiffuse * diffuseColor * ambient;\n \n  vec3 SpecularTint = mix(diffuseColor, fSpecularColor, flTintByBaseMask);\n  vec3 cSpecular = finalSpecular * SpecularTint * fSpecularScale * flSpecularMask * FresnelTerm.b;\n  final += cSpecular;\n \n  final = mix(final, cSpecular, flMetalnessMask);\n \n  vec3 rimLighting = vec3(0.0);\n  if ( bDoRimLighting )\n  {\n  rimLighting = vec3((FresnelTerm.r * fRimLightScale) * flRimMask);\n  rimLighting *= max(0.0, vectors.normal.y); // Masked by a 'sky light'\n  rimLighting *= fRimLightColor;\n  rimLighting *= (1.0 - flMetalnessMask); // Metalness\n  }\n  final += rimLighting;\n \n  final *= getShadowFactor();\n  diffuseShadingOutput(final);\n }\n \n \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}