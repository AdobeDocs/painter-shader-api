{"version":3,"file":"component---src-pages-api-shaders-pbr-velvet-md-4082b0cd785c99c6e31b.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,MACE,GAAM,0CAAwC,2CAEhDA,EAAAA,EAAAA,KAAA,oCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,+TAehCH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,mFACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,04EAqDpC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/api/shaders/pbr-velvet.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-0\"\n      }}>{` `}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-1\"\n      }}>{` `}</a></p>\n    <h1 {...{\n      \"id\": \"substance-3d-painter-pbr-velvet-shader\"\n    }}>{`Substance 3D Painter PBR Velvet shader`}</h1>\n    <p>{`Import from libraries.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`\n\n\n\n \n //: param auto channel_basecolor\n uniform SamplerSparse basecolor_tex;\n //: param auto channel_roughness\n uniform SamplerSparse roughness_tex;\n //: param auto channel_metallic\n uniform SamplerSparse metallic_tex;\n //: param auto channel_specularlevel\n uniform SamplerSparse specularlevel_tex;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-2\"\n      }}>{` `}</a></p>\n    <p>{`-------EXTERNAL ---------------------------------------------------//`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param custom { \"default\": \"fibers\", \"label\": \"Fibers Texture\", \"usage\": \"texture\" }\n uniform sampler2D fiber_tex;\n //: param custom { \"default\": 50.0, \"label\": \"Fiber Scale\", \"min\": 1.0, \"max\": 100.0 }\n uniform float fiber_scale;\n //: param custom { \"default\": 0.5, \"label\": \"Sheen\", \"min\": 0.0, \"max\": 2.0 }\n uniform float sheen;\n //: param custom { \"default\": \"sheen_noise\", \"label\": \"Sheen Variation\", \"usage\": \"texture\" }\n uniform sampler2D sheen_noise;\n //: param custom { \"default\": 3.0, \"label\": \"Variation Scale\", \"min\": 1.0, \"max\": 10.0 }\n uniform float sheen_noise_scale;\n //: param custom { \"default\": 8.0, \"label\": \"Edginess\", \"min\": 1.0, \"max\": 16.0 }\n uniform float edginess;\n //: param custom { \"default\": 0.75, \"label\": \"Fabric Tint\", \"min\": 0.0, \"max\": 1.0 }\n uniform float tint_amount;\n \n \n // SHADER\n void shade(V2F inputs)\n {\n  float roughness = getRoughness(roughness_tex, inputs.sparse_coord);\n  vec3 baseColor = getBaseColor(basecolor_tex, inputs.sparse_coord);\n  float metallic = getMetallic(metallic_tex, inputs.sparse_coord);\n  float specularLevel = getSpecularLevel(specularlevel_tex, inputs.sparse_coord);\n  vec3 diffColor = generateDiffuseColor(baseColor, metallic);\n  vec3 specColor = generateSpecularColor(specularLevel, baseColor, metallic);\n  // Get detail (ambient occlusion) and global (shadow) occlusion factors\n  float occlusion = getAO(inputs.sparse_coord) * getShadowFactor();\n  float specOcclusion = specularOcclusionCorrection(occlusion, metallic, roughness);\n \n  LocalVectors vectors = computeLocalFrame(inputs);\n \n  // Material\n  vec3 diffuse = occlusion * pbrComputeDiffuse(vectors.normal, diffColor);\n  vec3 specular = specOcclusion * pbrComputeSpecular(vectors, specColor, roughness);\n \n  // Velvet reflection, simply summed over previous computation\n  float cosine = clamp(dot(normalize(vectors.normal), normalize(vectors.eye)), 0.0, 1.0);\n  float sine = sqrt(1.0 - cosine * cosine);\n  float rand = texture(fiber_tex, inputs.tex_coord * fiber_scale).r;\n  float noise = texture(sheen_noise, inputs.tex_coord * sheen_noise_scale).r;\n  float intensity = rand * (sheen * noise + 0.002) * pow(sine, edginess);\n  vec3 tint = mix(vec3(1.0), diffColor, tint_amount);\n  diffuse += intensity * mix(occlusion, 1.0, 1.0 / edginess) * envIrradiance(vectors.normal) * tint;\n \n  diffuseShadingOutput(diffuse);\n  specularShadingOutput(specular);\n }\n \n \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}