"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[4568],{2105:function(n,e,o){o.r(e),o.d(e,{_frontmatter:function(){return i},default:function(){return m}});var l=o(87462),a=o(63366),c=(o(15007),o(64983)),t=o(91515),r=["components"],i={},p={_frontmatter:i},s=t.Z;function m(n){var e=n.components,o=(0,a.Z)(n,r);return(0,c.mdx)(s,(0,l.Z)({},p,o,{components:e,mdxType:"MDXLayout"}),(0,c.mdx)("p",null,"lib-pbr-aniso.glsl"),(0,c.mdx)("p",null,(0,c.mdx)("a",{parentName:"p",href:"#section-0"}," ")),(0,c.mdx)("p",null,(0,c.mdx)("a",{parentName:"p",href:"#section-1"}," ")),(0,c.mdx)("h1",{id:"lib-pbr-anisoglsl"},"lib-pbr-aniso.glsl"),(0,c.mdx)("p",null,(0,c.mdx)("strong",{parentName:"p"},"Public Functions:"),"\n",(0,c.mdx)("inlineCode",{parentName:"p"},"normal_distrib"),"\n",(0,c.mdx)("inlineCode",{parentName:"p"},"G1"),"\n",(0,c.mdx)("inlineCode",{parentName:"p"},"visibility"),"\n",(0,c.mdx)("inlineCode",{parentName:"p"},"cook_torrance_contrib"),"\n",(0,c.mdx)("inlineCode",{parentName:"p"},"importanceSampleGGX"),"\n",(0,c.mdx)("inlineCode",{parentName:"p"},"probabilityGGX"),"\n",(0,c.mdx)("inlineCode",{parentName:"p"},"pbrComputeSpecularAnisotropic")),(0,c.mdx)("p",null,"Import from library"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-glsl"},"import lib-pbr.glsl\n")),(0,c.mdx)("p",null,(0,c.mdx)("a",{parentName:"p",href:"#section-2"}," ")),(0,c.mdx)("p",null,"BRDF related functions"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre",className:"language-glsl"},"float normal_distrib(\n  vec3 localH,\n  vec2 alpha)\n {\n  localH.xy /= alpha;\n  float tmp = dot(localH, localH);\n  return 1.0 / (M_PI * alpha.x * alpha.y * tmp * tmp);\n }\n \n float G1(\n  vec3 localW,\n  vec2 alpha)\n {\n  // One generic factor of the geometry function divided by ndw\n  localW.xy *= alpha;\n  return 2.0 / (localW.z + length(localW));\n }\n \n float visibility(\n  vec3 localL,\n  vec3 localV,\n  vec2 alpha)\n {\n  // visibility is a Cook-Torrance geometry function divided by (n.l)*(n.v)\n  return G1(localL, alpha) * G1(localV, alpha);\n }\n \n vec3 cook_torrance_contrib(\n  float vdh,\n  float ndh,\n  vec3 localL,\n  vec3 localE,\n  vec3 F0,\n  vec3 F82,\n  vec2 alpha)\n {\n  // This is the contribution when using importance sampling with the GGX based\n  // sample distribution. This means ct_contrib = ct_brdf / ggx_probability\n  return fresnel(vdh, F0, F82) * (visibility(localL, localE, alpha) * vdh * localL.z / ndh);\n }\n \n vec3 cook_torrance_contrib(\n  float vdh,\n  float ndh,\n  vec3 localL,\n  vec3 localE,\n  vec3 Ks,\n  vec2 alpha)\n {\n  return cook_torrance_contrib(vdh, ndh, localL, localE, Ks, vec3(1.0), alpha);\n }\n \n vec3 importanceSampleGGX(vec2 Xi, vec2 alpha)\n {\n  float phi = 2.0 * M_PI * Xi.x;\n  vec2 slope = sqrt(Xi.y / (1.0 - Xi.y)) * alpha * vec2(cos(phi), sin(phi));\n  return normalize(vec3(slope, 1.0));\n }\n \n float probabilityGGX(vec3 localH, float vdh, vec2 alpha)\n {\n  return normal_distrib(localH, alpha) * localH.z / (4.0 * vdh);\n }\n \n vec3 pbrComputeSpecularAnisotropic(\n  LocalVectors vectors,\n  vec3 F0,\n  vec3 F82,\n  vec2 roughness,\n  float occlusion,\n  float bentNormalSpecularAmount)\n {\n  vec3 radiance = vec3(0.0);\n  vec2 alpha = roughness * roughness;\n  mat3 TBN = mat3(vectors.tangent, vectors.bitangent, vectors.normal);\n  vec3 localE = vectors.eye * TBN;\n  mat3 envTBN = mat3(\n  worldToEnvSpace(vectors.tangent),\n  worldToEnvSpace(vectors.bitangent),\n  worldToEnvSpace(vectors.normal));\n  vec3 envVertexN = worldToEnvSpace(vectors.vertexNormal);\n  vec3 envBent = worldToEnvSpace(vectors.bent);\n \n  // Bent normals occlusion\n  float occlusionStart = 0.75 - occlusion;\n  float occlusionEnd = 1.0 - occlusion;\n \n  for(int i=0; i<nbSamples; ++i)\n  {\n  vec2 Xi = fibonacci2DDitheredTemporal(i, nbSamples);\n  vec3 localH = importanceSampleGGX(Xi, alpha);\n  vec3 localL = reflect(-localE, localH);\n \n  float specOcclusion = 1.0;\n  vec3 envL = envTBN * localL;\n \n  if(bentNormalSpecularAmount!=0.0)\n  {\n  float mask = 1.0 - sqrt(1.0 - max(0.0, dot(envBent, envL)));\n  specOcclusion = smoothstep(occlusionStart, occlusionEnd, mask);\n  specOcclusion = mix(1.0, specOcclusion, bentNormalSpecularAmount);\n  }\n \n  if (localL.z > 0.0)\n  {\n  float vdh = max(1e-8, dot(localE, localH));\n \n  float fade = horizonFading(dot(envVertexN, envL), horizonFade);\n  float pdf = probabilityGGX(localH, vdh, alpha);\n  float lodS = max(roughness.x, roughness.y) < 0.01 ? 0.0 : computeLOD(envL, pdf);\n  // Offset lodS to trade bias for more noise\n  lodS -= 1.0;\n  vec3 preconvolvedSample = envSample(envL, lodS);\n \n  radiance +=\n  fade * specOcclusion * cook_torrance_contrib(vdh, localH.z, localL, localE, F0, F82, alpha) *\n  preconvolvedSample;\n  }\n  }\n \n  return radiance / float(nbSamples);\n }\n \n vec3 pbrComputeSpecularAnisotropic(\n  LocalVectors vectors,\n  vec3 F0,\n  vec3 F82,\n  vec2 roughness)\n {\n  return pbrComputeSpecularAnisotropic(vectors, F0, F82, roughness, 1.0, 0.0);\n }\n \n vec3 pbrComputeSpecularAnisotropic(\n  LocalVectors vectors,\n  vec3 specColor,\n  vec2 roughness,\n  float occlusion,\n  float bentNormalSpecularAmount)\n {\n  return pbrComputeSpecularAnisotropic(vectors, specColor, vec3(1.0), roughness, occlusion, bentNormalSpecularAmount);\n }\n \n vec3 pbrComputeSpecularAnisotropic(\n  LocalVectors vectors,\n  vec3 specColor,\n  vec2 roughness)\n {\n  return pbrComputeSpecularAnisotropic(vectors, specColor, roughness, 1.0, 0.0);\n }\n \n \n")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-libraries-lib-pbr-aniso-md-2376d88ad6dc09540664.js.map