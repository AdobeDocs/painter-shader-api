"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[4722],{86904:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return s},default:function(){return u}});var l=n(87462),r=n(63366),o=(n(15007),n(64983)),t=n(91515),p=["components"],s={},m={_frontmatter:s},d=t.Z;function u(e){var a=e.components,n=(0,r.Z)(e,p);return(0,o.mdx)(d,(0,l.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-0"}," ")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-1"}," ")),(0,o.mdx)("h1",{id:"lib-samplerglsl"},"lib-sampler.glsl"),(0,o.mdx)("hr",null),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Public Functions:"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getAO"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getShadowFactor"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getGlossiness"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getRoughness"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getMetallic"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getAnisotropyLevel"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getAnisotropyAngle"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getOpacity"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getHeight"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getDisplacement"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getSpecularLevel"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getBaseColor"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getDiffuse"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getSpecularColor"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getTranslucency"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getAbsorptionColor"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getScatteringPerComponent"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getScatteringColor"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getSpecularEdgeColor"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getSpecularTint"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getSheenOpacity"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getSheenColor"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getSheenRoughness"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getCoatOpacity"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getCoatColor"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getCoatRoughness"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"getCoatSpecularLevel"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"generateAnisotropicRoughness"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"generateDiffuseColor"),"\n",(0,o.mdx)("inlineCode",{parentName:"p"},"generateSpecularColor")),(0,o.mdx)("p",null,"Import from library"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"import lib-defines.glsl\n import lib-sparse.glsl\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-2"}," ")),(0,o.mdx)("p",null,"Default background colors when there is no data in channel (alpha is 0)"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"const vec3 DEFAULT_BASE_COLOR = vec3(0.5);\n const float DEFAULT_ROUGHNESS = 0.3;\n const float DEFAULT_METALLIC = 0.0;\n const float DEFAULT_ANISOTROPY_LEVEL = 0.0;\n const float DEFAULT_ANISOTROPY_ANGLE = 0.0;\n const float DEFAULT_OPACITY = 1.0;\n const float DEFAULT_AO = 1.0;\n const float DEFAULT_SPECULAR_LEVEL = 0.5;\n const float DEFAULT_HEIGHT = 0.0;\n const float DEFAULT_DISPLACEMENT = 0.0;\n const float DEFAULT_TRANSMISSIVE = 0.0;\n const float DEFAULT_TRANSLUCENCY = 0.0;\n const vec3 DEFAULT_ABSORPTION_COLOR = vec3(1.0);\n const float DEFAULT_SCATTERING = 0.0;\n const vec3 DEFAULT_SCATTERINGCOLOR = vec3(1.0);\n const vec3 DEFAULT_SPECULAR_TINT = vec3(1.0);\n const vec3 DEFAULT_SPEC_EDGE_COLOR = vec3(1.0);\n const float DEFAULT_SHEEN_OPACITY = 0.0;\n const vec3 DEFAULT_SHEEN_COLOR = vec3(1.0);\n const float DEFAULT_SHEEN_ROUGHNESS = 0.5;\n const float DEFAULT_COAT_OPACITY = 0.0;\n const vec3 DEFAULT_COAT_COLOR = vec3(1.0);\n const float DEFAULT_COAT_ROUGHNESS = 0.0;\n const float DEFAULT_COAT_SPEC_LEVEL = 0.5;\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-3"}," ")),(0,o.mdx)("p",null,"AO map."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"//: param auto ao_blending_mode\n uniform int ao_blending_mode;\n //: param auto texture_ao\n uniform SamplerSparse base_ao_tex;\n //: param auto channel_ao\n uniform SamplerSparse ao_tex;\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-4"}," ")),(0,o.mdx)("p",null,"A value used to tweak the Ambient Occlusion intensity."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},'//: param custom {\n //: "default": 0.75,\n //: "label": "AO Intensity",\n //: "min": 0.00,\n //: "max": 1.0,\n //: "group": "Base Surface",\n //: "description": "<html><head/><body><p>Ambience occlusion (AO) represents shadows from cavities and creases preventing light from hitting the surface. Uses the baked mesh map <b>Ambient occlusion</b> and/or the channel <b>Ambient occlusion</b>.</p></body></html>"\n //: }\n uniform float ao_intensity;\n')),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-5"}," ")),(0,o.mdx)("p",null,"Shadowmask."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"//: param auto shadow_mask_enable\n uniform bool sm_enable;\n //: param auto shadow_mask_opacity\n uniform float sm_opacity;\n //: param auto shadow_mask\n uniform sampler2D sm_tex;\n //: param auto screen_size\n uniform vec4 screen_size;\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-6"}," ")),(0,o.mdx)("p",null,"Return sampled glossiness or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getGlossiness(vec4 sampledValue)\n {\n  return sampledValue.r + (1.0 - DEFAULT_ROUGHNESS) * (1.0 - sampledValue.g);\n }\n \n float getGlossiness(SamplerSparse smp, SparseCoord coord)\n {\n  return getGlossiness(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-7"}," ")),(0,o.mdx)("p",null,"Return sampled roughness or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getRoughness(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_ROUGHNESS * (1.0 - sampledValue.g);\n }\n \n float getRoughness(SamplerSparse smp, SparseCoord coord)\n {\n  return getRoughness(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-8"}," ")),(0,o.mdx)("p",null,"Return sampled metallic or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getMetallic(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_METALLIC * (1.0 - sampledValue.g);\n }\n \n float getMetallic(SamplerSparse smp, SparseCoord coord)\n {\n  return getMetallic(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-9"}," ")),(0,o.mdx)("p",null,"Return sampled anisotropy level or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getAnisotropyLevel(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_ANISOTROPY_LEVEL * (1.0 - sampledValue.g);\n }\n \n float getAnisotropyLevel(SamplerSparse smp, SparseCoord coord)\n {\n  return getAnisotropyLevel(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-10"}," ")),(0,o.mdx)("p",null,"Return sampled anisotropy angle or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getAnisotropyAngle(vec4 sampledValue)\n {\n  return M_2PI * (sampledValue.r + DEFAULT_ANISOTROPY_ANGLE * (1.0 - sampledValue.g));\n }\n \n float getAnisotropyAngle(SamplerSparse smp, SparseCoord coord)\n {\n  // Manual trilinear filtering\n  float level = max(0.0, textureSparseQueryLod(smp, coord) + uvtile_lod_bias);\n  int level0 = int(level);\n  int level1 = level0 + 1;\n \n  ivec2 texSize0 = ivec2(smp.size.xy) >> level0;\n  ivec2 texSize1 = texSize0 >> 1;\n  ivec2 itex_coord0 = ivec2(coord.tex_coord * vec2(texSize0));\n  ivec2 itex_coord1 = ivec2(coord.tex_coord * vec2(texSize1));\n \n  // Assuming tex sizes are pow of 2, we can do the fast modulo\n  ivec2 texSizeMask0 = texSize0 - ivec2(1);\n  ivec2 texSizeMask1 = texSize1 - ivec2(1);\n \n  // Fetch the 8 samples needed\n  float a000 = getAnisotropyAngle(texelFetch(smp.tex, itex_coord0 & texSizeMask0, level0));\n  float a001 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord0 + ivec2(1, 0)) & texSizeMask0, level0)) - a000;\n  float a010 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord0 + ivec2(0, 1)) & texSizeMask0, level0)) - a000;\n  float a011 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord0 + ivec2(1, 1)) & texSizeMask0, level0)) - a000;\n  float a100 = getAnisotropyAngle(texelFetch(smp.tex, itex_coord1 & texSizeMask1, level1)) - a000;\n  float a101 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord1 + ivec2(1, 0)) & texSizeMask1, level1)) - a000;\n  float a110 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord1 + ivec2(0, 1)) & texSizeMask1, level1)) - a000;\n  float a111 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord1 + ivec2(1, 1)) & texSizeMask1, level1)) - a000;\n \n  // Detect if the angle warps inside the filtering footprint, and fix it\n  a001 += abs(a001) > M_PI ? sign(a001) * -M_2PI + a000 : a000;\n  a010 += abs(a010) > M_PI ? sign(a010) * -M_2PI + a000 : a000;\n  a011 += abs(a011) > M_PI ? sign(a011) * -M_2PI + a000 : a000;\n  a100 += abs(a100) > M_PI ? sign(a100) * -M_2PI + a000 : a000;\n  a101 += abs(a101) > M_PI ? sign(a101) * -M_2PI + a000 : a000;\n  a110 += abs(a110) > M_PI ? sign(a110) * -M_2PI + a000 : a000;\n  a111 += abs(a111) > M_PI ? sign(a111) * -M_2PI + a000 : a000;\n \n  // Trilinear blending of the samples\n  vec2 t0 = coord.tex_coord * vec2(texSize0) - vec2(itex_coord0);\n  vec2 t1 = coord.tex_coord * vec2(texSize1) - vec2(itex_coord1);\n  return mix(\n  mix(mix(a000, a001, t0.x), mix(a010, a011, t0.x), t0.y),\n  mix(mix(a100, a101, t1.x), mix(a110, a111, t1.x), t1.y),\n  level - float(level0));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-11"}," ")),(0,o.mdx)("p",null,"Return sampled opacity or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getOpacity(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_OPACITY * (1.0 - sampledValue.g);\n }\n \n float getOpacity(SamplerSparse smp, SparseCoord coord)\n {\n  return getOpacity(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-12"}," ")),(0,o.mdx)("p",null,"Return sampled height or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getHeight(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_HEIGHT * (1.0 - sampledValue.g);\n }\n \n float getHeight(SamplerSparse smp, SparseCoord coord)\n {\n  return getHeight(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-13"}," ")),(0,o.mdx)("p",null,"Return sampled displacement or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getDisplacement(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_DISPLACEMENT * (1.0 - sampledValue.g);\n }\n \n float getDisplacement(SamplerSparse smp, SparseCoord coord)\n {\n  return getDisplacement(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-14"}," ")),(0,o.mdx)("p",null,"Return ambient occlusion"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getAO(SparseCoord coord, bool is_premult, bool is_full_strength)\n {\n  vec2 ao_lookup = textureSparse(base_ao_tex, coord).ra;\n  float ao = ao_lookup.x + DEFAULT_AO * (1.0 - ao_lookup.y);\n \n  if (ao_tex.is_set) {\n  ao_lookup = textureSparse(ao_tex, coord).rg;\n  if (!is_premult) ao_lookup.x *= ao_lookup.y;\n  float channel_ao = ao_lookup.x + DEFAULT_AO * (1.0 - ao_lookup.y);\n  if (ao_blending_mode == BlendingMode_Replace) {\n  ao = channel_ao;\n  } else if (ao_blending_mode == BlendingMode_Multiply) {\n  ao *= channel_ao;\n  }\n  }\n  \n  // skip mix if full strength\n  // Otherwise modulate AO value by AO_intensity\n  return is_full_strength ? ao : mix(1.0, ao, ao_intensity);\n }\n \n float getAO(SparseCoord coord, bool is_premult)\n {\n  return getAO(coord, is_premult, false);\n }\n \n float getAO(SparseCoord coord)\n {\n  return getAO(coord, true, false);\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-15"}," ")),(0,o.mdx)("p",null,"Return specular level"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getSpecularLevel(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_SPECULAR_LEVEL * (1.0 - sampledValue.g);\n }\n \n float getSpecularLevel(SamplerSparse smp, SparseCoord coord)\n {\n  return getSpecularLevel(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-16"}," ")),(0,o.mdx)("p",null,"Fetch the shadowing factor (screen-space)"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getShadowFactor()\n {\n  float shadowFactor = 1.0;\n \n  if (sm_enable) {\n  vec2 screenCoord = (gl_FragCoord.xy * vec2(screen_size.z, screen_size.w));\n  vec2 shadowSample = texture(sm_tex, screenCoord).xy;\n  // shadowSample.x / shadowSample.y is the normalized shadow factor.\n  // shadowSample.x may already be normalized, shadowSample.y contains 0.0 in this case.\n  shadowFactor = shadowSample.y == 0.0 ? shadowSample.x : shadowSample.x / shadowSample.y;\n  }\n \n  return mix(1.0, shadowFactor, sm_opacity);\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-17"}," ")),(0,o.mdx)("p",null,"Return sampled base color or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 getBaseColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_BASE_COLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getBaseColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getBaseColor(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-18"}," ")),(0,o.mdx)("p",null,"Return sampled diffuse color or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 getDiffuse(vec4 sampledValue)\n {\n  return getBaseColor(sampledValue);\n }\n \n vec3 getDiffuse(SamplerSparse smp, SparseCoord coord)\n {\n  return getDiffuse(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-19"}," ")),(0,o.mdx)("p",null,"Return sampled specular color or a default value\nSpecular/Glossiness PBR workflow only"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 getSpecularColor(vec4 sampledValue)\n {\n  vec3 specColor = sampledValue.rgb + DEFAULT_BASE_COLOR * (1.0 - sampledValue.a);\n  vec3 defaultF0 = mix(vec3(0.04), specColor, DEFAULT_METALLIC);\n  return mix(specColor, defaultF0, (1.0 - sampledValue.a));\n }\n \n vec3 getSpecularColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getSpecularColor(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-20"}," ")),(0,o.mdx)("p",null,"Generate anisotropic roughness from roughness and anisotropy level"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec2 generateAnisotropicRoughness(float roughness, float anisoLevel)\n {\n  return vec2(roughness, roughness / sqrt(max(1e-8, 1.0 - anisoLevel)));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-21"}," ")),(0,o.mdx)("p",null,"Generate anisotropic roughness from roughness and anisotropy level,\nfor the ASM model."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec2 generateAnisotropicRoughnessASM(float roughness, float anisoLevel)\n {\n  float alphaU = min(1., roughness*roughness + pow(anisoLevel , 4.0));\n  return vec2(sqrt(alphaU), roughness);\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-22"}," ")),(0,o.mdx)("p",null,"Generate diffuse color from base color and metallic factor"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 generateDiffuseColor(vec3 baseColor, float metallic)\n {\n  return baseColor * (1.0 - metallic);\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-23"}," ")),(0,o.mdx)("p",null,"Generate specular color from dielectric specular level, base color and metallic factor"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 generateSpecularColor(float specularLevel, vec3 baseColor, float metallic)\n {\n  return mix(vec3(0.08 * specularLevel), baseColor, metallic);\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-24"}," ")),(0,o.mdx)("p",null,"Generate specular color from base color and metallic factor, using default\nspecular level (0.04) for dielectrics"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 generateSpecularColor(vec3 baseColor, float metallic)\n {\n  return mix(vec3(0.04), baseColor, metallic);\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-25"}," ")),(0,o.mdx)("p",null,"Return sampled transmissive value or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getTranslucency(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_TRANSLUCENCY * (1.0 - sampledValue.g);\n }\n \n float getTranslucency(SamplerSparse smp, SparseCoord coord)\n {\n  return getTranslucency(textureSparse(smp, coord));\n }\n \n vec3 getAbsorptionColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_ABSORPTION_COLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getAbsorptionColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getAbsorptionColor(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-26"}," ")),(0,o.mdx)("p",null,"Return sampled scattering value per component or a default value\nHandle grayscale (same radius for R, G & B) or color texture"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 getScatteringPerComponent(SamplerSparse smp, SparseCoord coord)\n {\n  vec4 sampledValue = textureSparse(smp, coord);\n  return smp.is_color ?\n  sampledValue.rgb + vec3(DEFAULT_SCATTERING) * (1.0 - sampledValue.a) :\n  vec3(sampledValue.r + DEFAULT_SCATTERING * (1.0 - sampledValue.g));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-27"}," ")),(0,o.mdx)("p",null,"Return sampled scatter color or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 getScatteringColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_SCATTERINGCOLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getScatteringColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getScatteringColor(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-28"}," ")),(0,o.mdx)("p",null,"Return sampled specular tint value or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 getSpecularTint(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_SPECULAR_TINT * (1.0 - sampledValue.a);\n }\n \n vec3 getSpecularTint(SamplerSparse smp, SparseCoord coord)\n {\n  return getSpecularTint(textureSparse(smp, coord));\n }\n \n vec3 getSpecularEdgeColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_SPEC_EDGE_COLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getSpecularEdgeColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getSpecularEdgeColor(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-29"}," ")),(0,o.mdx)("p",null,"Return sampled sheen opacity (sheen weight) value or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getSheenOpacity(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_SHEEN_OPACITY * (1.0 - sampledValue.g);\n }\n \n float getSheenOpacity(SamplerSparse smp, SparseCoord coord)\n {\n  return getSheenOpacity(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-30"}," ")),(0,o.mdx)("p",null,"Return sampled sheen color value or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 getSheenColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_SHEEN_COLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getSheenColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getSheenColor(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-31"}," ")),(0,o.mdx)("p",null,"Return sampled sheen roughness value or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getSheenRoughness(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_SHEEN_ROUGHNESS * (1.0 - sampledValue.g);\n }\n \n float getSheenRoughness(SamplerSparse smp, SparseCoord coord)\n {\n  return getSheenRoughness(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-32"}," ")),(0,o.mdx)("p",null,"Return sampled coat opacity (coat weight) value or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getCoatOpacity(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_COAT_OPACITY * (1.0 - sampledValue.g);\n }\n \n float getCoatOpacity(SamplerSparse smp, SparseCoord coord)\n {\n  return getCoatOpacity(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-33"}," ")),(0,o.mdx)("p",null,"Return sampled coat color value or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec3 getCoatColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_COAT_COLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getCoatColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getCoatColor(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-34"}," ")),(0,o.mdx)("p",null,"Return sampled coat roughness value or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getCoatRoughness(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_COAT_ROUGHNESS * (1.0 - sampledValue.g);\n }\n \n float getCoatRoughness(SamplerSparse smp, SparseCoord coord)\n {\n  return getCoatRoughness(textureSparse(smp, coord));\n }\n")),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"#section-35"}," ")),(0,o.mdx)("p",null,"Return sampled coat specular level value or a default value"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-glsl"},"float getCoatSpecularLevel(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_COAT_SPEC_LEVEL * (1.0 - sampledValue.g);\n }\n \n float getCoatSpecularLevel(SamplerSparse smp, SparseCoord coord)\n {\n  return getCoatSpecularLevel(textureSparse(smp, coord));\n }\n \n \n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-libraries-lib-sampler-md-a22f23a6ac279ddf9b85.js.map