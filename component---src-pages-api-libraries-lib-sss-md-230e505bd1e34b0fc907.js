"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[3565],{54893:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return c},default:function(){return u}});var a=t(87462),r=t(63366),s=(t(15007),t(64983)),l=t(91515),o=["components"],c={},i={_frontmatter:c},m=l.Z;function u(e){var n=e.components,t=(0,r.Z)(e,o);return(0,s.mdx)(m,(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-0"}," ")),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-1"}," ")),(0,s.mdx)("p",null,"============"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Public Functions:"),"\n",(0,s.mdx)("inlineCode",{parentName:"p"},"getSSSCoefficients"),"\n",(0,s.mdx)("inlineCode",{parentName:"p"},"getSSSColor")),(0,s.mdx)("p",null,"Import from library"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},"")),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-2"}," ")),(0,s.mdx)("p",null,"The translucency texture, used as SSS weight"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},"//: param auto channel_translucency\n uniform SamplerSparse sss_translucency_tex;\n")),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-3"}," ")),(0,s.mdx)("p",null,"The scalar or per component (R,G & B) SSS coefficient texture"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},"//: param auto channel_scattering\n uniform SamplerSparse sss_scattering_tex;\n")),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-4"}," ")),(0,s.mdx)("p",null,"The scatter color texture, used as SSS albedo"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},'//: param auto channel_scatteringcolor\n uniform SamplerSparse sss_scatteringcolor_tex;\n \n \n //: param auto scene_original_radius\n uniform float sssSceneScale;\n \n //: param custom {\n //: "label": "Enable",\n //: "default": false,\n //: "group": "Interior/Subsurface Scattering Parameters",\n //: "description": "<html><head/><body><p>Scatters light below the surface, rather than passing straight through.<br/><b>Please note</b>: <b>Activate Subsurface Scattering</b> needs to be enabled in <b>Display Settings</b> and the following channel needs to be present for the subsurface scattering parameters to have an effect: <b>Scattering</b></p></body></html>",\n //: "asm": "scatter"\n //: }\n uniform_specialization bool sssEnabled;\n')),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-5"}," ")),(0,s.mdx)("p",null,"Select whether the light penetrates straight through the material (translucent)\nor is diffused before starting to scatter (skin)."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},'//: param custom {\n //: "default": 2,\n //: "label": "Scattering type",\n //: "widget": "combobox",\n //: "values": {\n //: "Translucent": 0,\n //: "Skin": 1,\n //: "Red Shift - Rayleigh": 2\n //: },\n //: "group": "Interior/Subsurface Scattering Parameters",\n //: "description": "<html><head/><body><p>Skin, Translucent/Generic or Red Shift & Rayleigh controls.<br/><b>Please note</b>: <b>Activate Subsurface Scattering</b> needs to be enabled in <b>Display Settings</b> and the following channel needs to be present for the subsurface scattering parameters to have an effect: <b>Scattering</b></p></body></html>",\n //: "visible": "input.sssEnabled",\n //: "asm": "_scatter_type"\n //: }\n uniform int sssType;\n')),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-6"}," ")),(0,s.mdx)("p",null,"Select which channel is used for scatter color."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},'//: param custom {\n //: "default": 0,\n //: "label": "Scatter color",\n //: "widget": "combobox",\n //: "values": {\n //: "Default albedo": 0,\n //: "ScatteringColor channel": 1\n //: },\n //: "group": "Interior/Subsurface Scattering Parameters",\n //: "description": "<html><head/><body><p>Select which channel is used to define scatter color.<br/><b>Please note</b>: <b>Activate Subsurface Scattering</b> needs to be enabled in <b>Display Settings</b> and the following channel needs to be present for the subsurface scattering parameters to have an effect: <b>Scattering</b></p></body></html>",\n //: "visible": "input.sssEnabled",\n //: "asm": "_scattering_color_source"\n //: }\n uniform int sssScatteringColorSource;\n')),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-7"}," ")),(0,s.mdx)("p",null,"Enable subsurface weighting using translucency channel"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},'//: param custom {\n //: "default": false,\n //: "label": "Use translucency channel as scattering mask",\n //: "group": "Interior/Subsurface Scattering Parameters",\n //: "description": "<html><head/><body><p>Select if <b>Translucency</b> channel is used to interpolate between the scattered diffuse and the original diffuse.<br/><b>Please note</b>: <b>Activate Subsurface Scattering</b> needs to be enabled in <b>Display Settings</b> and the following channel needs to be present for the subsurface scattering parameters to have an effect: <b>Scattering</b></p></body></html>",\n //: "visible": "input.sssEnabled",\n //: "asm": "_scattering_uses_translucency"\n //: }\n uniform_specialization bool sssScatteringUsesTranslucency;\n')),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-8"}," ")),(0,s.mdx)("p",null,"Global scale to the subsurface scattering effect"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},'//: param custom {\n //: "default": 0.5,\n //: "label": "Scale",\n //: "min": 0.01,\n //: "max": 1.0,\n //: "group": "Interior/Subsurface Scattering Parameters",\n //: "description": "<html><head/><body><p>Controls the radius/depth of the light absorption in the material.<br/><b>Please note</b>: <b>Activate Subsurface Scattering</b> needs to be enabled in <b>Display Settings</b> and the following channel needs to be present for the subsurface scattering parameters to have an effect: <b>Scattering</b></p></body></html>",\n //: "visible": "input.sssEnabled",\n //: "asm": "scatter_distance"\n //: }\n uniform float sssScale;\n')),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-9"}," ")),(0,s.mdx)("p",null,"Wavelength dependency of the SSS of the material"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},'//: param custom {\n //: "default": [0.701, 0.301, 0.305],\n //: "label": "Color",\n //: "widget": "color",\n //: "group": "Interior/Subsurface Scattering Parameters",\n //: "description": "<html><head/><body><p>The color below the surface that scattered light will become.<br/><b>Please note</b>: <b>Activate Subsurface Scattering</b> needs to be enabled in <b>Display Settings</b> and the following channel needs to be present for the subsurface scattering parameters to have an effect: <b>Scattering</b></p></body></html>",\n //: "visible": "input.sssEnabled && (input.sssType == 0 || input.sssType == 1)"\n //: }\n uniform vec3 sssColor;\n')),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-10"}," ")),(0,s.mdx)("p",null,"Red shift scattering"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},'//: param custom {\n //: "default": 0.0,\n //: "label": "Red shift",\n //: "min": 0.0,\n //: "max": 1.0,\n //: "group": "Interior/Subsurface Scattering Parameters",\n //: "description": "<html><head/><body><p>Sets red light to travel further than other light colors. Useful for skin.<br/><b>Please note</b>: <b>Activate Subsurface Scattering</b> needs to be enabled in <b>Display Settings</b> and the following channel needs to be present for the subsurface scattering parameters to have an effect: <b>Scattering</b></p></body></html>",\n //: "visible": "input.sssEnabled && input.sssType == 2",\n //: "asm": "scatter_red_shift"\n //: }\n uniform float sssRedShift;\n')),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-11"}," ")),(0,s.mdx)("p",null,"Rayleigh scattering"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},'//: param custom {\n //: "default": 0.0,\n //: "label": "Rayleigh",\n //: "min": 0.0,\n //: "max": 1.0,\n //: "group": "Interior/Subsurface Scattering Parameters",\n //: "description": "<html><head/><body><p>Sets orange light to travel further beneath the surface and blue light to travel less.<br/><b>Please note</b>: <b>Activate Subsurface Scattering</b> needs to be enabled in <b>Display Settings</b> and the following channel needs to be present for the subsurface scattering parameters to have an effect: <b>Scattering</b></p></body></html>",\n //: "visible": "input.sssEnabled && input.sssType == 2",\n //: "asm": "scatter_rayleigh"\n //: }\n uniform float sssRayleigh;\n')),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-12"}," ")),(0,s.mdx)("p",null,"Return the material SSS coefficients from scattering value (per component)"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec4 getSSSCoefficients(vec3 scattering) {\n  vec4 coeffs = vec4(0.0);\n  if (sssEnabled) {\n  coeffs.xyz = sssScale / sssSceneScale * scattering;\n  coeffs.w = coeffs.xyz==vec3(0.0) ? 0.0 : 1.0;\n  // sssColor still applied here: do not break project that use\n  // stored shader fallbacks (in case of compilation error)\n  if (sssType != 2) {\n  coeffs.xyz *= sssColor;\n  }\n  }\n  return coeffs;\n }\n")),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-13"}," ")),(0,s.mdx)("p",null,"Return the material SSS coefficients\nComputed from SSS uniforms and Scattering channel sampling"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec4 getSSSCoefficients(SparseCoord coord) {\n  if (sssEnabled) {\n  return getSSSCoefficients(getScatteringPerComponent(sss_scattering_tex, coord));\n  }\n  return vec4(0.0);\n }\n")),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-14"}," ")),(0,s.mdx)("p",null,"Return the material SSS color from scatter color and weight (translucency)"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec4 getSSSColor(vec3 color, float weight) {\n  return vec4(color,weight);\n }\n")),(0,s.mdx)("p",null,(0,s.mdx)("a",{parentName:"p",href:"#section-15"}," ")),(0,s.mdx)("p",null,"Return the material SSS color and weight (translucency)\nSample into the ScatteringColor and Translucency channels"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec4 getSSSColor(SparseCoord coord) {\n  if (sssEnabled) {\n  return getSSSColor(\n  sssScatteringColorSource==1 ? getScatteringColor(sss_scatteringcolor_tex, coord) : vec3(1.0),\n  sssScatteringUsesTranslucency ? getTranslucency(sss_translucency_tex, coord) : 1.0);\n  }\n  return vec4(0.0);\n }\n \n \n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-libraries-lib-sss-md-230e505bd1e34b0fc907.js.map