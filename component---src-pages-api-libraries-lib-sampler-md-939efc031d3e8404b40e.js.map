{"version":3,"file":"component---src-pages-api-libraries-lib-sampler-md-939efc031d3e8404b40e.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/api/libraries/lib-sampler.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-0\"\n      }}>{` `}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-1\"\n      }}>{` `}</a></p>\n    <h1 {...{\n      \"id\": \"lib-samplerglsl\"\n    }}>{`lib-sampler.glsl`}</h1>\n    <p><strong parentName=\"p\">{`Public Functions:`}</strong>{`\n`}<inlineCode parentName=\"p\">{`getAO`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getShadowFactor`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getGlossiness`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getRoughness`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getMetallic`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getAnisotropyLevel`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getAnisotropyAngle`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getOpacity`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getHeight`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getDisplacement`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getSpecularLevel`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getBaseColor`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getDiffuse`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getSpecularColor`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getTranslucency`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getAbsorptionColor`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getScatteringPerComponent`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getScatteringColor`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getSpecularEdgeColor`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getSpecularTint`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getSheenOpacity`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getSheenColor`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getSheenRoughness`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getCoatOpacity`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getCoatColor`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getCoatRoughness`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getCoatSpecularLevel`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`generateAnisotropicRoughness`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`generateDiffuseColor`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`generateSpecularColor`}</inlineCode></p>\n    <p>{`Import from library`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`import lib-defines.glsl\n import lib-sparse.glsl\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-2\"\n      }}>{` `}</a></p>\n    <p>{`Default background colors when there is no data in channel (alpha is 0)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`const vec3 DEFAULT_BASE_COLOR = vec3(0.5);\n const float DEFAULT_ROUGHNESS = 0.3;\n const float DEFAULT_METALLIC = 0.0;\n const float DEFAULT_ANISOTROPY_LEVEL = 0.0;\n const float DEFAULT_ANISOTROPY_ANGLE = 0.0;\n const float DEFAULT_OPACITY = 1.0;\n const float DEFAULT_AO = 1.0;\n const float DEFAULT_SPECULAR_LEVEL = 0.5;\n const float DEFAULT_HEIGHT = 0.0;\n const float DEFAULT_DISPLACEMENT = 0.0;\n const float DEFAULT_TRANSMISSIVE = 0.0;\n const float DEFAULT_TRANSLUCENCY = 0.0;\n const vec3 DEFAULT_ABSORPTION_COLOR = vec3(1.0);\n const float DEFAULT_SCATTERING = 0.0;\n const vec3 DEFAULT_SCATTERINGCOLOR = vec3(1.0);\n const vec3 DEFAULT_SPECULAR_TINT = vec3(1.0);\n const vec3 DEFAULT_SPEC_EDGE_COLOR = vec3(1.0);\n const float DEFAULT_SHEEN_OPACITY = 0.0;\n const vec3 DEFAULT_SHEEN_COLOR = vec3(1.0);\n const float DEFAULT_SHEEN_ROUGHNESS = 0.5;\n const float DEFAULT_COAT_OPACITY = 0.0;\n const vec3 DEFAULT_COAT_COLOR = vec3(1.0);\n const float DEFAULT_COAT_ROUGHNESS = 0.0;\n const float DEFAULT_COAT_SPEC_LEVEL = 0.5;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-3\"\n      }}>{` `}</a></p>\n    <p>{`AO map.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto ao_blending_mode\n uniform int ao_blending_mode;\n //: param auto texture_ao\n uniform SamplerSparse base_ao_tex;\n //: param auto channel_ao\n uniform SamplerSparse ao_tex;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-4\"\n      }}>{` `}</a></p>\n    <p>{`A value used to tweak the Ambient Occlusion intensity.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param custom {\n //: \"default\": 0.75,\n //: \"label\": \"AO Intensity\",\n //: \"min\": 0.00,\n //: \"max\": 1.0,\n //: \"group\": \"Base Surface\",\n //: \"description\": \"<html><head/><body><p>Ambience occlusion (AO) represents shadows from cavities and creases preventing light from hitting the surface. Uses the baked mesh map <b>Ambient occlusion</b> and/or the channel <b>Ambient occlusion</b>.</p></body></html>\"\n //: }\n uniform float ao_intensity;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-5\"\n      }}>{` `}</a></p>\n    <p>{`Shadowmask.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto shadow_mask_enable\n uniform bool sm_enable;\n //: param auto shadow_mask_opacity\n uniform float sm_opacity;\n //: param auto shadow_mask\n uniform sampler2D sm_tex;\n //: param auto screen_size\n uniform vec4 screen_size;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-6\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled glossiness or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getGlossiness(vec4 sampledValue)\n {\n  return sampledValue.r + (1.0 - DEFAULT_ROUGHNESS) * (1.0 - sampledValue.g);\n }\n \n float getGlossiness(SamplerSparse smp, SparseCoord coord)\n {\n  return getGlossiness(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-7\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled roughness or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getRoughness(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_ROUGHNESS * (1.0 - sampledValue.g);\n }\n \n float getRoughness(SamplerSparse smp, SparseCoord coord)\n {\n  return getRoughness(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-8\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled metallic or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getMetallic(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_METALLIC * (1.0 - sampledValue.g);\n }\n \n float getMetallic(SamplerSparse smp, SparseCoord coord)\n {\n  return getMetallic(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-9\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled anisotropy level or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getAnisotropyLevel(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_ANISOTROPY_LEVEL * (1.0 - sampledValue.g);\n }\n \n float getAnisotropyLevel(SamplerSparse smp, SparseCoord coord)\n {\n  return getAnisotropyLevel(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-10\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled anisotropy angle or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getAnisotropyAngle(vec4 sampledValue)\n {\n  return M_2PI * (sampledValue.r + DEFAULT_ANISOTROPY_ANGLE * (1.0 - sampledValue.g));\n }\n \n float getAnisotropyAngle(SamplerSparse smp, SparseCoord coord)\n {\n  // Manual trilinear filtering\n  float level = max(0.0, textureSparseQueryLod(smp, coord) + uvtile_lod_bias);\n  int level0 = int(level);\n  int level1 = level0 + 1;\n \n  ivec2 texSize0 = ivec2(smp.size.xy) >> level0;\n  ivec2 texSize1 = texSize0 >> 1;\n  ivec2 itex_coord0 = ivec2(coord.tex_coord * vec2(texSize0));\n  ivec2 itex_coord1 = ivec2(coord.tex_coord * vec2(texSize1));\n \n  // Assuming tex sizes are pow of 2, we can do the fast modulo\n  ivec2 texSizeMask0 = texSize0 - ivec2(1);\n  ivec2 texSizeMask1 = texSize1 - ivec2(1);\n \n  // Fetch the 8 samples needed\n  float a000 = getAnisotropyAngle(texelFetch(smp.tex, itex_coord0 & texSizeMask0, level0));\n  float a001 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord0 + ivec2(1, 0)) & texSizeMask0, level0)) - a000;\n  float a010 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord0 + ivec2(0, 1)) & texSizeMask0, level0)) - a000;\n  float a011 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord0 + ivec2(1, 1)) & texSizeMask0, level0)) - a000;\n  float a100 = getAnisotropyAngle(texelFetch(smp.tex, itex_coord1 & texSizeMask1, level1)) - a000;\n  float a101 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord1 + ivec2(1, 0)) & texSizeMask1, level1)) - a000;\n  float a110 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord1 + ivec2(0, 1)) & texSizeMask1, level1)) - a000;\n  float a111 = getAnisotropyAngle(texelFetch(smp.tex, (itex_coord1 + ivec2(1, 1)) & texSizeMask1, level1)) - a000;\n \n  // Detect if the angle warps inside the filtering footprint, and fix it\n  a001 += abs(a001) > M_PI ? sign(a001) * -M_2PI + a000 : a000;\n  a010 += abs(a010) > M_PI ? sign(a010) * -M_2PI + a000 : a000;\n  a011 += abs(a011) > M_PI ? sign(a011) * -M_2PI + a000 : a000;\n  a100 += abs(a100) > M_PI ? sign(a100) * -M_2PI + a000 : a000;\n  a101 += abs(a101) > M_PI ? sign(a101) * -M_2PI + a000 : a000;\n  a110 += abs(a110) > M_PI ? sign(a110) * -M_2PI + a000 : a000;\n  a111 += abs(a111) > M_PI ? sign(a111) * -M_2PI + a000 : a000;\n \n  // Trilinear blending of the samples\n  vec2 t0 = coord.tex_coord * vec2(texSize0) - vec2(itex_coord0);\n  vec2 t1 = coord.tex_coord * vec2(texSize1) - vec2(itex_coord1);\n  return mix(\n  mix(mix(a000, a001, t0.x), mix(a010, a011, t0.x), t0.y),\n  mix(mix(a100, a101, t1.x), mix(a110, a111, t1.x), t1.y),\n  level - float(level0));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-11\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled opacity or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getOpacity(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_OPACITY * (1.0 - sampledValue.g);\n }\n \n float getOpacity(SamplerSparse smp, SparseCoord coord)\n {\n  return getOpacity(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-12\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled height or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getHeight(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_HEIGHT * (1.0 - sampledValue.g);\n }\n \n float getHeight(SamplerSparse smp, SparseCoord coord)\n {\n  return getHeight(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-13\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled displacement or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getDisplacement(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_DISPLACEMENT * (1.0 - sampledValue.g);\n }\n \n float getDisplacement(SamplerSparse smp, SparseCoord coord)\n {\n  return getDisplacement(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-14\"\n      }}>{` `}</a></p>\n    <p>{`Return ambient occlusion`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getAO(SparseCoord coord, bool is_premult, bool is_full_strength)\n {\n  vec2 ao_lookup = textureSparse(base_ao_tex, coord).ra;\n  float ao = ao_lookup.x + DEFAULT_AO * (1.0 - ao_lookup.y);\n \n  if (ao_tex.is_set) {\n  ao_lookup = textureSparse(ao_tex, coord).rg;\n  if (!is_premult) ao_lookup.x *= ao_lookup.y;\n  float channel_ao = ao_lookup.x + DEFAULT_AO * (1.0 - ao_lookup.y);\n  if (ao_blending_mode == BlendingMode_Replace) {\n  ao = channel_ao;\n  } else if (ao_blending_mode == BlendingMode_Multiply) {\n  ao *= channel_ao;\n  }\n  }\n  \n  // skip mix if full strength\n  // Otherwise modulate AO value by AO_intensity\n  return is_full_strength ? ao : mix(1.0, ao, ao_intensity);\n }\n \n float getAO(SparseCoord coord, bool is_premult)\n {\n  return getAO(coord, is_premult, false);\n }\n \n float getAO(SparseCoord coord)\n {\n  return getAO(coord, true, false);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-15\"\n      }}>{` `}</a></p>\n    <p>{`Return specular level`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getSpecularLevel(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_SPECULAR_LEVEL * (1.0 - sampledValue.g);\n }\n \n float getSpecularLevel(SamplerSparse smp, SparseCoord coord)\n {\n  return getSpecularLevel(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-16\"\n      }}>{` `}</a></p>\n    <p>{`Fetch the shadowing factor (screen-space)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getShadowFactor()\n {\n  float shadowFactor = 1.0;\n \n  if (sm_enable) {\n  vec2 screenCoord = (gl_FragCoord.xy * vec2(screen_size.z, screen_size.w));\n  vec2 shadowSample = texture(sm_tex, screenCoord).xy;\n  // shadowSample.x / shadowSample.y is the normalized shadow factor.\n  // shadowSample.x may already be normalized, shadowSample.y contains 0.0 in this case.\n  shadowFactor = shadowSample.y == 0.0 ? shadowSample.x : shadowSample.x / shadowSample.y;\n  }\n \n  return mix(1.0, shadowFactor, sm_opacity);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-17\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled base color or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getBaseColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_BASE_COLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getBaseColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getBaseColor(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-18\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled diffuse color or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getDiffuse(vec4 sampledValue)\n {\n  return getBaseColor(sampledValue);\n }\n \n vec3 getDiffuse(SamplerSparse smp, SparseCoord coord)\n {\n  return getDiffuse(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-19\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled specular color or a default value\nSpecular/Glossiness PBR workflow only`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getSpecularColor(vec4 sampledValue)\n {\n  vec3 specColor = sampledValue.rgb + DEFAULT_BASE_COLOR * (1.0 - sampledValue.a);\n  vec3 defaultF0 = mix(vec3(0.04), specColor, DEFAULT_METALLIC);\n  return mix(specColor, defaultF0, (1.0 - sampledValue.a));\n }\n \n vec3 getSpecularColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getSpecularColor(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-20\"\n      }}>{` `}</a></p>\n    <p>{`Generate anisotropic roughness from roughness and anisotropy level`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec2 generateAnisotropicRoughness(float roughness, float anisoLevel)\n {\n  return vec2(roughness, roughness / sqrt(max(1e-8, 1.0 - anisoLevel)));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-21\"\n      }}>{` `}</a></p>\n    <p>{`Generate anisotropic roughness from roughness and anisotropy level,\nfor the ASM model.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec2 generateAnisotropicRoughnessASM(float roughness, float anisoLevel)\n {\n  float alphaU = min(1., roughness*roughness + pow(anisoLevel , 4.0));\n  return vec2(sqrt(alphaU), roughness);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-22\"\n      }}>{` `}</a></p>\n    <p>{`Generate diffuse color from base color and metallic factor`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 generateDiffuseColor(vec3 baseColor, float metallic)\n {\n  return baseColor * (1.0 - metallic);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-23\"\n      }}>{` `}</a></p>\n    <p>{`Generate specular color from dielectric specular level, base color and metallic factor`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 generateSpecularColor(float specularLevel, vec3 baseColor, float metallic)\n {\n  return mix(vec3(0.08 * specularLevel), baseColor, metallic);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-24\"\n      }}>{` `}</a></p>\n    <p>{`Generate specular color from base color and metallic factor, using default\nspecular level (0.04) for dielectrics`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 generateSpecularColor(vec3 baseColor, float metallic)\n {\n  return mix(vec3(0.04), baseColor, metallic);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-25\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled transmissive value or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getTranslucency(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_TRANSLUCENCY * (1.0 - sampledValue.g);\n }\n \n float getTranslucency(SamplerSparse smp, SparseCoord coord)\n {\n  return getTranslucency(textureSparse(smp, coord));\n }\n \n vec3 getAbsorptionColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_ABSORPTION_COLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getAbsorptionColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getAbsorptionColor(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-26\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled scattering value per component or a default value\nHandle grayscale (same radius for R, G & B) or color texture`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getScatteringPerComponent(SamplerSparse smp, SparseCoord coord)\n {\n  vec4 sampledValue = textureSparse(smp, coord);\n  return smp.is_color ?\n  sampledValue.rgb + vec3(DEFAULT_SCATTERING) * (1.0 - sampledValue.a) :\n  vec3(sampledValue.r + DEFAULT_SCATTERING * (1.0 - sampledValue.g));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-27\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled scatter color or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getScatteringColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_SCATTERINGCOLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getScatteringColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getScatteringColor(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-28\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled specular tint value or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getSpecularTint(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_SPECULAR_TINT * (1.0 - sampledValue.a);\n }\n \n vec3 getSpecularTint(SamplerSparse smp, SparseCoord coord)\n {\n  return getSpecularTint(textureSparse(smp, coord));\n }\n \n vec3 getSpecularEdgeColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_SPEC_EDGE_COLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getSpecularEdgeColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getSpecularEdgeColor(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-29\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled sheen opacity (sheen weight) value or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getSheenOpacity(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_SHEEN_OPACITY * (1.0 - sampledValue.g);\n }\n \n float getSheenOpacity(SamplerSparse smp, SparseCoord coord)\n {\n  return getSheenOpacity(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-30\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled sheen color value or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getSheenColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_SHEEN_COLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getSheenColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getSheenColor(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-31\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled sheen roughness value or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getSheenRoughness(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_SHEEN_ROUGHNESS * (1.0 - sampledValue.g);\n }\n \n float getSheenRoughness(SamplerSparse smp, SparseCoord coord)\n {\n  return getSheenRoughness(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-32\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled coat opacity (coat weight) value or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getCoatOpacity(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_COAT_OPACITY * (1.0 - sampledValue.g);\n }\n \n float getCoatOpacity(SamplerSparse smp, SparseCoord coord)\n {\n  return getCoatOpacity(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-33\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled coat color value or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getCoatColor(vec4 sampledValue)\n {\n  return sampledValue.rgb + DEFAULT_COAT_COLOR * (1.0 - sampledValue.a);\n }\n \n vec3 getCoatColor(SamplerSparse smp, SparseCoord coord)\n {\n  return getCoatColor(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-34\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled coat roughness value or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getCoatRoughness(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_COAT_ROUGHNESS * (1.0 - sampledValue.g);\n }\n \n float getCoatRoughness(SamplerSparse smp, SparseCoord coord)\n {\n  return getCoatRoughness(textureSparse(smp, coord));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-35\"\n      }}>{` `}</a></p>\n    <p>{`Return sampled coat specular level value or a default value`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`float getCoatSpecularLevel(vec4 sampledValue)\n {\n  return sampledValue.r + DEFAULT_COAT_SPEC_LEVEL * (1.0 - sampledValue.g);\n }\n \n float getCoatSpecularLevel(SamplerSparse smp, SparseCoord coord)\n {\n  return getCoatSpecularLevel(textureSparse(smp, coord));\n }\n \n \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}