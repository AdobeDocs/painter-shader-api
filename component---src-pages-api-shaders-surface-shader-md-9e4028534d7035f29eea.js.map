{"version":3,"file":"component---src-pages-api-shaders-surface-shader-md-9e4028534d7035f29eea.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,MACE,GAAM,sBAAoB,wBAE5BA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,gJACcA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,iCAC/CH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,+BAGhCH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,MACE,GAAM,6BAA2B,+BAEnCA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,mfAYhCH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,oFAA8EA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,wBAAsC,gBAAgBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACxK,KAAQ,2DAAyD,qBAErEH,EAAAA,EAAAA,KAAA,MACE,GAAM,0BAAwB,4BAEhCA,EAAAA,EAAAA,KAAA,mEAA6DA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,SAAe,+CAC9FH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,gsBAgBhCH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,mGAA6FA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,8DAG3H,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/api/shaders/surface-shader.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-0\"\n      }}>{` `}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-1\"\n      }}>{` `}</a></p>\n    <h1 {...{\n      \"id\": \"surface-shaderglsl\"\n    }}>{`surface-shader.glsl`}</h1>\n    <hr></hr>\n    <p>{`To create a shader resource that can be used in Substance 3D Painter, just create a glsl file containing a single\nfunction called `}<em parentName=\"p\">{`shade`}</em>{` with the following profile:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`void shade(V2F inputs);\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-2\"\n      }}>{` `}</a></p>\n    <h2 {...{\n      \"id\": \"v2f-input-type-definition\"\n    }}>{`V2F input type definition:`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`struct V2F {\n  vec3 normal; // interpolated normal\n  vec3 tangent; // interpolated tangent\n  vec3 bitangent; // interpolated bitangent\n  vec3 position; // interpolated position\n  vec4 color[1]; // interpolated vertex colors (color0)\n  vec2 tex_coord; // interpolated texture coordinates (uv0)\n  SparseCoord sparse_coord; // interpolated sparse texture coordinates used by textureSparse() sampling function\n  vec2 multi_tex_coord[8]; // interpolated texture coordinates (uv0-uv7)\n };\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-3\"\n      }}>{` `}</a></p>\n    <p>{`Note: To obtain a SparseCoord for uv1-uv7, you have to explicitly call `}<inlineCode parentName=\"p\">{`getSparseCoord(vec2)`}</inlineCode>{` defined in `}<a parentName=\"p\" {...{\n        \"href\": \"/painter-shader-api/src/pages/api/libraries/lib-sparse/\"\n      }}>{`lib-sparse.glsl`}</a></p>\n    <h2 {...{\n      \"id\": \"surface-shader-outputs\"\n    }}>{`Surface shader outputs:`}</h2>\n    <p>{`The following functions can be called from within the `}<em parentName=\"p\">{`shade`}</em>{` function to describe fragment properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`// fragment opacity. default value: 1.0\n void alphaOutput(float);\n // Second RGBA output (dual blending), only used with *add_multiply* blending mode. default value: vec4(1.0)\n void color1Output(vec4);\n // diffuse lighting contribution. default value: vec3(0.0)\n void diffuseShadingOutput(vec3);\n // specular lighting contribution. default value: vec3(0.0)\n void specularShadingOutput(vec3);\n // color emitted by the fragment. default value: vec3(0.0)\n void emissiveColorOutput(vec3);\n // fragment color. default value: vec3(1.0)\n void albedoOutput(vec3);\n // subsurface scattering properties, see lib-sss.glsl for details. default value: vec4(0.0)\n void sssCoefficientsOutput(vec4);\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-4\"\n      }}>{` `}</a></p>\n    <p>{`As an example, the most basic rendering equation for computing the fragment color is: `}<inlineCode parentName=\"p\">{`emissiveColor + albedo * diffuseShading + specularShading`}</inlineCode></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}