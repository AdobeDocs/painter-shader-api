{"version":3,"file":"component---src-pages-api-libraries-lib-normal-md-777f412e513aa68e3879.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/api/libraries/lib-normal.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-0\"\n      }}>{` `}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-1\"\n      }}>{` `}</a></p>\n    <h1 {...{\n      \"id\": \"lib-normalglsl\"\n    }}>{`lib-normal.glsl`}</h1>\n    <p><strong parentName=\"p\">{`Public Functions:`}</strong>{`\n`}<inlineCode parentName=\"p\">{`normalBlend`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`normalBlendOriented`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`normalFade`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`normalUnpack`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`normalFromBaseNormal`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`normalFromNormal`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`normalFromHeight`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getTSNormal`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`computeWSBaseNormal`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`computeWSNormal`}</inlineCode></p>\n    <p>{`Import from library`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`import lib-defines.glsl\n import lib-sparse.glsl\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-2\"\n      }}>{` `}</a></p>\n    <p>{`All engine parameters useful for normal-centric operations.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto channel_height\n uniform SamplerSparse height_texture;\n //: param auto channel_normal\n uniform SamplerSparse normal_texture;\n //: param auto texture_normal\n uniform SamplerSparse base_normal_texture;\n //: param auto normal_blending_mode\n uniform int normal_blending_mode;\n //: param auto height_2_normal_method\n uniform int height_2_normal_method;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-3\"\n      }}>{` `}</a></p>\n    <p>{`Used to invert the Y axis of the normal map`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto normal_y_coeff\n uniform float base_normal_y_coeff;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-4\"\n      }}>{` `}</a></p>\n    <p>{`Empirically determined by our artists...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`const float HEIGHT_FACTOR = 400.0;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-5\"\n      }}>{` `}</a></p>\n    <p>{`Perform the blending between 2 normal maps`}</p>\n    <p>{`This is based on Whiteout blending\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://blog.selfshadow.com/publications/blending-in-detail/\"\n      }}>{`http://blog.selfshadow.com/publications/blending-in-detail/`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 normalBlend(vec3 baseNormal, vec3 overNormal)\n {\n  return normalize(vec3(\n  baseNormal.xy + overNormal.xy,\n  baseNormal.z * overNormal.z));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-6\"\n      }}>{` `}</a></p>\n    <p>{`Perform a detail oriented blending between 2 normal maps`}</p>\n    <p>{`This is based on Detail Oriented blending\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://blog.selfshadow.com/publications/blending-in-detail/\"\n      }}>{`http://blog.selfshadow.com/publications/blending-in-detail/`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 normalBlendOriented(vec3 baseNormal, vec3 overNormal)\n {\n  baseNormal.z += 1.0;\n  overNormal.xy = -overNormal.xy;\n  return normalize(baseNormal * dot(baseNormal,overNormal) -\n  overNormal*baseNormal.z);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-7\"\n      }}>{` `}</a></p>\n    <p>{`Returns a normal flattened by an attenuation factor`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 normalFade(vec3 normal,float attenuation)\n {\n  if (attenuation<1.0 && normal.z<1.0)\n  {\n  float phi = attenuation * acos(normal.z);\n  normal.xy *= 1.0/sqrt(1.0-normal.z*normal.z) * sin(phi);\n  normal.z = cos(phi);\n  }\n \n  return normal;\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-8\"\n      }}>{` `}</a></p>\n    <p>{`Unpack a normal w/ alpha channel`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 normalUnpack(vec4 normal_alpha, float y_coeff)\n {\n  if (normal_alpha.a == 0.0 || normal_alpha.xyz == vec3(0.0)) {\n  return vec3(0.0, 0.0, 1.0);\n  }\n \n  // Attenuation in function of alpha\n  vec3 normal = normal_alpha.xyz/normal_alpha.a * 2.0 - vec3(1.0);\n  normal.y *= y_coeff;\n  normal.z = max(1e-3, normal.z);\n  normal = normalize(normal);\n  normal = normalFade(normal, normal_alpha.a);\n \n  return normal;\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-9\"\n      }}>{` `}</a></p>\n    <p>{`Unpack a normal w/ alpha channel, no Y invertion`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 normalUnpack(vec4 normal_alpha)\n {\n  return normalUnpack(normal_alpha, 1.0);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-10\"\n      }}>{` `}</a></p>\n    <p>{`Compute the tangent space normal from document's height channel`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 normalFromHeight(SparseCoord coord, float height_force)\n {\n  // Normal computation using height map\n \n  // Determine gradient offset in function of derivatives\n  vec2 dfd = max(coord.dfdx,coord.dfdy);\n  dfd = max(dfd,height_texture.size.zw);\n \n  vec2 dfdx,dfdy;\n  textureSparseQueryGrad(dfdx, dfdy, height_texture, coord);\n  float h_l = textureGrad(height_texture.tex, coord.tex_coord+vec2(-dfd.x, 0 ), dfdx, dfdy).r;\n  float h_t = textureGrad(height_texture.tex, coord.tex_coord+vec2( 0, dfd.y), dfdx, dfdy).r;\n \n  vec2 dh_dudv;\n  if (height_2_normal_method==1) {\n  float h_c = textureGrad(height_texture.tex, coord.tex_coord, dfdx, dfdy).r;\n  dh_dudv = 4.0 * height_force / dfd * vec2(h_l-h_c,h_c-h_t);\n  }\n  else {\n  float h_r = textureGrad(height_texture.tex, coord.tex_coord+vec2( dfd.x, 0 ), dfdx, dfdy).r;\n  float h_b = textureGrad(height_texture.tex, coord.tex_coord+vec2( 0, -dfd.y), dfdx, dfdy).r;\n  float h_rt = textureGrad(height_texture.tex, coord.tex_coord+vec2( dfd.x, dfd.y), dfdx, dfdy).r;\n  float h_lt = textureGrad(height_texture.tex, coord.tex_coord+vec2(-dfd.x, dfd.y), dfdx, dfdy).r;\n  float h_rb = textureGrad(height_texture.tex, coord.tex_coord+vec2( dfd.x, -dfd.y), dfdx, dfdy).r;\n  float h_lb = textureGrad(height_texture.tex, coord.tex_coord+vec2(-dfd.x, -dfd.y), dfdx, dfdy).r;\n \n  dh_dudv = (0.5 * height_force) / dfd * vec2(\n  2.0*(h_l-h_r)+h_lt-h_rt+h_lb-h_rb,\n  2.0*(h_b-h_t)+h_rb-h_rt+h_lb-h_lt);\n  }\n \n  return normalize(vec3(dh_dudv, HEIGHT_FACTOR));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-11\"\n      }}>{` `}</a></p>\n    <p>{`Helper to compute the tangent space normal from base normal and a height\nvalue, and an optional detail normal.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getTSNormal(SparseCoord coord, SamplerSparse texture, vec3 normalFromHeight)\n {\n  vec3 normal = normalBlendOriented(\n  normalUnpack(textureSparse(texture, coord), base_normal_y_coeff),\n  normalFromHeight);\n \n  if (normal_texture.is_set) {\n  vec3 channelNormal = normalUnpack(textureSparse(normal_texture, coord));\n  if (normal_blending_mode == BlendingMode_Replace) {\n  normal = normalBlendOriented(normalFromHeight, channelNormal);\n  } else if (normal_blending_mode == BlendingMode_NM_Combine) {\n  normal = normalBlendOriented(normal, channelNormal);\n  }\n  }\n \n  return normal;\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-12\"\n      }}>{` `}</a></p>\n    <p>{`Overload that use base_normal_texture`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getTSNormal(SparseCoord coord, vec3 normalFromHeight)\n {\n  return getTSNormal(coord, base_normal_texture, normalFromHeight);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-13\"\n      }}>{` `}</a></p>\n    <p>{`Helper to compute the tangent space normal from base normal and height, and\nan optional detail normal.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getTSNormal(SparseCoord coord, SamplerSparse texture)\n {\n  float height_force = 1.0;\n  vec3 normalH = normalFromHeight(coord, height_force);\n  return getTSNormal(coord, texture, normalH);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-14\"\n      }}>{` `}</a></p>\n    <p>{`Overload that use base_normal_texture`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getTSNormal(SparseCoord coord)\n {\n  return getTSNormal(coord, base_normal_texture);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-15\"\n      }}>{` `}</a></p>\n    <p>{`Helper to compute the world space normal from tangent space base normal.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 computeWSBaseNormal(SparseCoord coord, vec3 tangent, vec3 bitangent, vec3 normal)\n {\n  vec3 normal_vec = normalUnpack(textureSparse(normal_texture, coord), base_normal_y_coeff);\n  return normalize(\n  normal_vec.x * tangent +\n  normal_vec.y * bitangent +\n  normal_vec.z * normal\n  );\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-16\"\n      }}>{` `}</a></p>\n    <p>{`Helper to compute the world space normal from tangent space normal given by\ngetTSNormal helpers, and local frame of the mesh.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 computeWSNormal(SparseCoord coord, vec3 tangent, vec3 bitangent, vec3 normal)\n {\n  vec3 normal_vec = getTSNormal(coord);\n  return normalize(\n  normal_vec.x * tangent +\n  normal_vec.y * bitangent +\n  normal_vec.z * normal\n  );\n }\n \n \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}