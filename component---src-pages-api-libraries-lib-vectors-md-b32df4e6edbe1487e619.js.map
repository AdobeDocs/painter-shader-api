{"version":3,"file":"component---src-pages-api-libraries-lib-vectors-md-b32df4e6edbe1487e619.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/api/libraries/lib-vectors.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-0\"\n      }}>{` `}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-1\"\n      }}>{` `}</a></p>\n    <h1 {...{\n      \"id\": \"lib-vectorsglsl\"\n    }}>{`lib-vectors.glsl`}</h1>\n    <p><strong parentName=\"p\">{`Public Functions:`}</strong>{`\n`}<inlineCode parentName=\"p\">{`computeLocalFrame`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`getEyeVec`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`tangentSpaceToWorldSpace`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`worldSpaceToTangentSpace`}</inlineCode></p>\n    <p>{`Import from library`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`import lib-normal.glsl\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-2\"\n      }}>{` `}</a></p>\n    <p>{`Which view is shaded.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto is_2d_view\n uniform bool is2DView;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-3\"\n      }}>{` `}</a></p>\n    <p>{`What kind of projection is used.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto is_perspective_projection\n uniform bool is_perspective;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-4\"\n      }}>{` `}</a></p>\n    <p>{`Eye position in world space.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto world_eye_position\n uniform vec3 camera_pos;\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-5\"\n      }}>{` `}</a></p>\n    <p>{`Camera orientation in world space.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`//: param auto world_camera_direction\n uniform vec3 camera_dir;\n \n //: param auto facing\n uniform int facing;\n \n bool isBackFace() {\n  return facing == -1 || (facing == 0 && !gl_FrontFacing);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-6\"\n      }}>{` `}</a></p>\n    <p>{`Compute the world space eye vector`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 getEyeVec(vec3 position) {\n  return is_perspective ?\n  normalize(camera_pos - position) :\n  -camera_dir;\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-7\"\n      }}>{` `}</a></p>\n    <p>{`Convert a vector from tangent space to world space`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 tangentSpaceToWorldSpace(vec3 vecTS, V2F inputs) {\n  return normalize(\n  vecTS.x * inputs.tangent +\n  vecTS.y * inputs.bitangent +\n  vecTS.z * inputs.normal);\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-8\"\n      }}>{` `}</a></p>\n    <p>{`Convert a vector from world space to tangent space`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`vec3 worldSpaceToTangentSpace(vec3 vecWS, V2F inputs) {\n  // Assume the transformation is orthogonal\n  return normalize(vecWS * mat3(inputs.tangent, inputs.bitangent, inputs.normal));\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-9\"\n      }}>{` `}</a></p>\n    <p>{`Local frame of vertex in world space`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`struct LocalVectors {\n  vec3 vertexNormal;\n  vec3 tangent, bitangent, normal, eye, bent;\n };\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-10\"\n      }}>{` `}</a></p>\n    <p>{`Compute local frame from custom world space normal and anisotropy angle`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`LocalVectors computeLocalFrame(V2F inputs, vec3 normal, float anisoAngle) {\n  LocalVectors vectors;\n  vectors.vertexNormal = inputs.normal;\n  vectors.normal = normal;\n  vectors.bent = vec3(0.0);\n \n  // Flip the normals for back facing polygons\n  if (isBackFace()) {\n  vectors.vertexNormal = -vectors.vertexNormal;\n  vectors.normal = -vectors.normal;\n  }\n \n  vectors.eye = is2DView ?\n  vectors.normal : // In 2D view, put view vector along the normal\n  getEyeVec(inputs.position);\n \n  // Trick to remove black artifacts\n  // Backface ? place the eye at the opposite - removes black zones\n  if (dot(vectors.eye, vectors.normal) < 0.0) {\n  vectors.eye = reflect(vectors.eye, vectors.normal);\n  }\n \n  // Create a local frame for BRDF work\n  vec3 tangent = normalize(\n  inputs.tangent\n  - vectors.normal * dot(inputs.tangent, vectors.normal)\n  );\n  vec3 bitangent = normalize(\n  inputs.bitangent\n  - vectors.normal * dot(inputs.bitangent, vectors.normal)\n  - tangent * dot(inputs.bitangent, tangent)\n  );\n \n  float cosAngle = cos(anisoAngle);\n  float sinAngle = sin(anisoAngle);\n  vectors.tangent = cosAngle * tangent - sinAngle * bitangent;\n  vectors.bitangent = cosAngle * bitangent + sinAngle * tangent;\n \n  return vectors;\n }\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-11\"\n      }}>{` `}</a></p>\n    <p>{`Compute local frame from mesh and document height and normals`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`LocalVectors computeLocalFrame(V2F inputs) {\n  // Get world space normal\n  vec3 normal = computeWSNormal(inputs.sparse_coord, inputs.tangent, inputs.bitangent, inputs.normal);\n  return computeLocalFrame(inputs, normal, 0.0);\n }\n \n \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}