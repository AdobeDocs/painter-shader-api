"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[6183],{42376:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return o},default:function(){return s}});var t=n(87462),r=n(63366),i=(n(15007),n(64983)),m=n(91515),l=["components"],o={},u={_frontmatter:o},p=m.Z;function s(e){var a=e.components,n=(0,r.Z)(e,l);return(0,i.mdx)(p,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"#section-0"},"#")),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"#section-1"},"#")),(0,i.mdx)("h1",{id:"custom-qualifiers"},"Custom qualifiers"),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"uniform_specialization"},"uniform_specialization"),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"uniform_specialization")," custom qualifier can be used as drop","-","in replacement of ",(0,i.mdx)("em",{parentName:"p"},"uniform"),"\nqualifier before ",(0,i.mdx)("em",{parentName:"p"},"bool"),", ",(0,i.mdx)("em",{parentName:"p"},"int"),", ",(0,i.mdx)("em",{parentName:"p"},"float"),", ",(0,i.mdx)("em",{parentName:"p"},"ivec2"),", ",(0,i.mdx)("em",{parentName:"p"},"ivec3"),", ",(0,i.mdx)("em",{parentName:"p"},"ivec4"),", ",(0,i.mdx)("em",{parentName:"p"},"vec2"),", ",(0,i.mdx)("em",{parentName:"p"},"vec3"),", ",(0,i.mdx)("em",{parentName:"p"},"vec4")," types.\nIt's handled as a regular uniform, except that it forces shader specializations: uniform value\nis inlined as a constant.\nAn optimized shader is instanced and compiled for each different value chosen by the user.\nFor float types, only zero values are specialized."),(0,i.mdx)("p",null,"By reducing complexity of shaders, in particular uber shaders,\nit allows visible performance boost when used properly, without sacrificing flexibility."),(0,i.mdx)("p",null,"Basic usage:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-glsl"},'//: param custom { "default": false, "label": "Heavy feature" }\n uniform_specialization bool u_enable_heavy_featureA;\n //: param custom { "default": 0, "label": "Contribution weight of another heavy feature" }\n uniform_specialization float u_weight_heavy_featureB;\n \n vec4 heavyFeatureA() { ... }\n vec4 heavyFeatureB() { ... }\n')),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"#section-2"},"#")),(0,i.mdx)("p",null,"Shader entry point"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-glsl"},"vec4 shade(V2F inputs)\n {\n   vec4 result_color(0.0);\n \n   if (u_enable_heavy_featureA) {\n     // Eliminated if u_enable_heavy_feature is false\n     result_color += heavyFeatureA();\n   }\n \n   // heavyFeatureB() is eliminated if u_weight_heavy_computation is 0\n   result_color += heavyFeatureB() * u_weight_heavy_featureB;\n \n   return result_color;\n }\n \n \n")))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-parameters-all-custom-qualifiers-md-3274297725fa8823ca88.js.map