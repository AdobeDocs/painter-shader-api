{"version":3,"file":"component---src-pages-api-shaders-non-pbr-spec-gloss-md-62239d7d9f7acf0b2812.js","mappings":"mTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,cAAY,OAExBH,EAAAA,EAAAA,KAAA,MACE,GAAM,0DAAwD,4DAEhEA,EAAAA,EAAAA,KAAA,oCACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,gnFA2FpC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/api/shaders/non-pbr-spec-gloss.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/painter-shader-api/painter-shader-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-0\"\n      }}>{` `}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#section-1\"\n      }}>{` `}</a></p>\n    <h1 {...{\n      \"id\": \"substance-3d-painter-specularglossiness-non-pbr-shader\"\n    }}>{`Substance 3D Painter Specular/Glossiness Non-PBR shader`}</h1>\n    <p>{`Import from libraries.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-glsl\"\n      }}>{`import lib-alpha.glsl\n import lib-emissive.glsl\n import lib-env.glsl\n import lib-sampler.glsl\n import lib-vectors.glsl\n \n //: param auto channel_diffuse\n uniform SamplerSparse diffuse_tex;\n //: param auto channel_specular\n uniform SamplerSparse specular_tex;\n //: param auto channel_glossiness\n uniform SamplerSparse glossiness_tex;\n \n //: param auto main_light\n uniform vec4 light_main;\n \n //: param custom {\n //: \"default\": 5.0,\n //: \"label\": \"Fresnel Power\",\n //: \"min\": 1.0,\n //: \"max\": 10.0\n //: }\n uniform float fresnel_power;\n \n //: param custom {\n //: \"default\": 1.0,\n //: \"label\": \"Fresnel Strength\",\n //: \"min\": 0.0,\n //: \"max\": 1.0\n //: }\n uniform float fresnel_str;\n \n //: param custom {\n //: \"default\": 0.25,\n //: \"label\": \"Ambient Light\",\n //: \"min\": 0.0,\n //: \"max\": 1.0\n //: }\n uniform float ambient_str;\n \n //: param custom {\n //: \"default\": 1.0,\n //: \"label\": \"Light Intensity\",\n //: \"min\": 0.0,\n //: \"max\": 10.0\n //: }\n uniform float light_str;\n \n \n void shade(V2F inputs)\n {\n  vec3 diffColor = getDiffuse(diffuse_tex, inputs.sparse_coord);\n  vec3 specColor = getSpecularColor(specular_tex, inputs.sparse_coord);\n  float glossiness = getGlossiness(glossiness_tex, inputs.sparse_coord);\n  float occlusion = getAO(inputs.sparse_coord) * getShadowFactor();\n \n  // Compute local vectors and cos of some useful angles\n  inputs.normal = normalize(inputs.normal);\n  LocalVectors vectors = computeLocalFrame(inputs);\n \n  // Emissive contribution\n  emissiveColorOutput(pbrComputeEmissive(emissive_tex, inputs.sparse_coord));\n \n  // Discard current fragment on the basis of the opacity channel\n  // and a user defined threshold\n  alphaKill(inputs.sparse_coord);\n \n  float ndl = max(0.0, dot(vectors.normal, light_main.xyz));\n  float ndv = clamp(dot(vectors.normal, vectors.eye), 0.0, 1.0);\n  float ndh = max(0.0, dot(vectors.normal, normalize(light_main.xyz + vectors.eye)));\n \n  // Ambient and diffuse contribution\n  vec3 Kd = (envIrradiance(inputs.normal) * ambient_str + ndl) * diffColor * occlusion;\n \n  // Specular contribution (normalized Blinn-Phong)\n  float exponent = exp2(9.0 * glossiness);\n  vec3 Ks = fresnel_str * mix(vec3(pow(1.0 - ndv, fresnel_power)), vec3(1.0), specColor); // Fresnel\n  Ks *= ndl * pow(ndh, exponent); // Reflection\n  Ks *= (0.125 * exponent + 1.0); // Normalization\n  Ks *= mix(occlusion, 1.0, glossiness * glossiness); // Occlusion\n \n  // Multiply by light irradiance (estimation of texel irradiance)\n  diffuseShadingOutput(light_str * environment_exposure * Kd);\n  specularShadingOutput(light_str * environment_exposure * Ks);\n }\n \n \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}